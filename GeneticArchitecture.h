//
// Created by p278834 on 9-5-2019.
//

#ifndef EXPLICITGENOMESPECIATION_GENETICARCHITECTURE_H
#define EXPLICITGENOMESPECIATION_GENETICARCHITECTURE_H

#include <list>
#include <vector>
#include <set>
#include "ParameterSet.h"

typedef std::pair<size_t, size_t> Edge;  // A network edge is a pair of locus indices

class GeneticArchitecture {

public:

    struct LocusConstants {

        size_t character;
        size_t linkageGroup;
        double location;
        double effectSize;
        double dominanceCoeff;
        std::list<std::pair<size_t, double> > edges;

    };

    // Fields
    std::vector<double> chromosomeSizes;
    std::vector<LocusConstants> locusConstants;
    std::vector<std::set<size_t> > networkVertices;

    explicit GeneticArchitecture(const ParameterSet&);

    // Setters
    void generateGeneticArchitecture(const ParameterSet&);
    void storeGeneticArchitecture(const ParameterSet&);
    void loadGeneticArchitecture(const ParameterSet&);
    std::vector<Edge> preferentialAttachmentNetwork(const size_t&, size_t&, const double&);
    void createRecombinationMap(const ParameterSet&);
    void sampleEffectSizes(const ParameterSet &parameters);
    void sampleDominanceCoeff(const ParameterSet &parameters);

};

// Function used to sort edges in a network (should it be here or in the cpp file?)
bool edgeCompare (const Edge &x, const Edge &y)
{
    if (x.first == y.first) {
        return (x.second < y.second);
    }
    else {
        return (x.first < y.first);
    }
}


#endif //EXPLICITGENOMESPECIATION_GENETICARCHITECTURE_H

// Preferential attachment
// creates a random network generated by a (non)linear preferential attachment model
// the network is guaranteed to be connected as has no self-loops or multi-edges
// parameters:
//     n         : number of vertices
//     e         : number of edges
// degree distribution:
//     alpha < 1 : P(k) ~ stretched-exponential
//     alpha = 1 : P(k) ~ 1 / k^3 (Barabasi-Albert)
//     alpha > 1 : ~> star-network