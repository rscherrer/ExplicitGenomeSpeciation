% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/collect_simulations.R
\name{collect_simulations}
\alias{collect_simulations}
\title{Collect data across simulations}
\usage{
collect_simulations(
  simulations,
  variables,
  parnames = NULL,
  pattern = "^sim_",
  verbose = TRUE,
  pb = TRUE,
  add_summaries = NULL,
  reverse_order = NULL,
  filters = NULL,
  check_extant = TRUE
)
}
\arguments{
\item{simulations}{Either path to a root directory containing simulation folders, or a vector of simulation folders}

\item{variables}{What variables to collect}

\item{pattern}{Optional pattern characteristic of simulation folders. Defaults to starting with "sim_".}

\item{verbose}{Whether to display messages}

\item{pb}{Whether to display progress bars}

\item{add_summaries}{Optional function to add extra columns to the data prior to plotting. This can be useful for mapping more complex values than those read from parameter files, to aesthetics such as facets or colors (e.g. color the lines by value of the mean of the variable over the final few timepoint). The function will be called with a single argument, the long data frame to which ggplot is applied, and must return a table with columns to append to that long data frame. Those added columns can be specified and used in facet_rows, facet_cols and color_by, just as any parameter. Make sure that potential extra arguments are passed by default or within the function body (e.g. the time points over which to measure the mean of the variable). Its output will be appended to the long data frame using cbind(), so make sure that it returns a table with new, summary variables as columns, and the right number of rows. The long table taken as input has at least the columns "simulation" (factor), "time" (integer), the variable to plot and any optional parameters read from parameter files that are requested in facet_rows, facet_cols or color_by. As an example, "add_summaries = function(data) data \%>\% group_by(simulation) \%>\% mutate(x = last(RI)) \%>\% ungroup() \%>\% select(x)" will add a column named "x" containing the last value of variable RI for each simulation, and assumes that RI is the variable to be plotted here. Note that the "plot_simulations" function loads the tidyverse, so no need to load any of it in the function passed to this argument.}

\item{reverse_order}{Optional name of a parameter for which to reverse the order of the levels (e.g. to put highest values on the top rows)}

\item{filters}{Optional strings to be parsed into a call to the dplyr::filter function, allowing various rules to filter the data. For example, use filters = c("ecosel == 1", "hsymmetry \%in\% c(0, 1)") to only keep simulations where ecosel is 1 and hsymmetry is either 0 or 1. Those parsed expressions must evaluate to logicals when the function is called.}

\item{check_extant}{Whether to filter extant simulations. Defaults to TRUE. Set to FALSE if e.g. you supplied a vector of simulations you know did not go missing or extinct.}
}
\value{
A data frame in the long format. It contains columns with the variables of interest, time, simulation identifier, parameters if requested and optional extra variables (see add_summaries).
}
\description{
Read in population-wide data and parameters from multiple extant simulations
}
\details{
At least root or simulations must be provided.
}
