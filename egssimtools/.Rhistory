"genome_alpha",
"genome_meang",
"genome_freq",
"network_corgen",
"network_corbreed",
"network_corfreq",
"network_avgi",
"network_avgj"
)
map(
sprintf("%s/whattosave.txt", folders),
function(fname) {
f <- file(fname)
writeLines(whattosave, f)
close(f)
}
)
root <- "/media/raphael/bigass/simulations/EGS/"
root <- "/media/raphael/bigass/simulations/EGS/genomes"
roots <- fetch_dirs(root, pattern = "^sim", level = 1)
library(egssimtools)
roots <- fetch_dirs(root, pattern = "^sim", level = 1)
roots <- find_extant(roots)
?read_data
variables <- c("EI", "RI", "SI")
roots %>% map_dfr(read_data, variables)
variables <- c("EI", "RI", "SI", "Fst")
by <- c(1, 1, 1, 3)
data <- roots %>% map_dfr(read_data, variables, by = by)
variables <- c("time", "EI", "RI", "SI", "Fst")
by <- c(1, 1, 1, 1, 3)
data <- roots %>% map_dfr(read_data, variables, by = by)
variables <- c("time", "EI", "RI", "SI", "Fst", "Gst", "Qst", "Cst", "varG", "varA", "varN", "varT")
by <- c(1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3)
data <- roots %>% map_dfr(read_data, variables, by = by)
head(data)
library(ggsim)
ggplotline(data, x = "time", y = "EI")
gglineplot(data, x = "time", y = "EI")
data$simulation <- seq(nrow(data))
gglineplot(data, x = "time", y = "EI")
gglineplot(data, x = "time", y = "EI", line = "simulation")
variables <- c("time", "EI", "RI", "SI", "Fst", "Gst", "Qst", "Cst", "varG", "varA", "varN", "varT")
by <- c(1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3)
data <- roots %>% map_dfr(read_data, variables, by = by, .id = "simulation")
gglineplot(data, x = "time", y = "EI", line = "simulation")
gglineplot(data, x = "time", y = "Fst1", line = "simulation")
gglineplot(data, x = "EI", y = "Fst1", line = "simulation")
gglineplot(data, x = "RI", y = "Fst1", line = "simulation")
gglineplot(data, x = "RI", y = "Fst2", line = "simulation")
gglineplot(data, x = "RI", y = "Fst3", line = "simulation")
gglineplot(data, x = "time", y = "RI", line = "simulation")
gglineplot(data, x = "time", y = "varA", line = "simulation")
gglineplot(data, x = "time", y = "varA1", line = "simulation")
parnames <- c("ecosel", "hsymmetry", "scaleI")
data <- roots %>% map_dfr(read_data, variables, by = by, parnames = parnames, .id = "simulation")
gglineplot(data, x = "time", y = "varA1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "varN1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "varA1", y = "varN1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "varA1", y = "varA2", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "EI", y = "varA1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "EI", y = "varN1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "EI", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "varA2", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "varA1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "varA3", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Fst", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Fs1t", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Fst1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Fst2", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Fst3", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Gst1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Gst2", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Gst3", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Qst1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "varA1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Qst1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "varA1", y = "Qst1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Qst1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Qst2", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Qst3", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Cst1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Cst2", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Cst3", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Fst1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
?read_data
data2 <- roots %>% map_dfr(function(root) {
d <- read_data(root, variables, by = by, parnames = parnames)
a <- read_genome_architecture(root)
data.frame(d, a)
}, i.d = "simulation")
data2 <- roots %>% map_dfr(function(root) {
d <- read_data(root, variables, by = by, parnames = parnames)
a <- read_genome_architecture(root)
data.frame(d, a)
}, .id = "simulation")
variables <- c("time", "genome_Fst")
by <- c(1, 1)
dupl <- c(300, 1)
parnames <- c("ecosel", "hsymmetry", "scaleI")
data2 <- roots %>% map_dfr(function(root) {
d <- read_data(root, variables, by = by, parnames = parnames)
a <- read_genome_architecture(root)
data.frame(d, a)
}, .id = "simulation")
data2 <- roots %>% map_dfr(function(root) {
d <- read_data(root, variables, by = by, dupl = dupl, parnames = parnames)
a <- read_genome_architecture(root)
data.frame(d, a)
}, .id = "simulation")
head(data)
head(data2)
rm(list = ls())
library(egssimtools)
root <- "/media/raphael/bigass/simulations/EGS/"
fname <- paste0(root, "simulations.rds")
data <- readRDS(fname)
root <- "/media/raphael/bigass/simulations/EGS/genomes/"
fname <- paste0(root, "simulations.rds")
data <- readRDS(fname)
rm(list = ls())
library(egssimtools)
root <- "/media/raphael/bigass/simulations/EGS/genomes/"
fname <- paste0(root, "simulations.rds")
tidyv
library(tidyverse)
root <- "/media/raphael/bigass/simulations/EGS/genomes/"
fname <- paste0(root, "simulations.rds")
data <- readRDS(fname)
root <- list.files(root)[1]
variables <- c("time", "Fst", "Gst", "Qst", "Cst")
by <- c(1, 3, 3, 3, 3)
dupl <- c(1, 1, 1, 1, 1)
parnames <- c("hsymmetry", "ecosel", "scaleI", "seed")
as_numeric <- parnames
read_data(root, variables = variables, by = by, dupl = dupl, parnames = parnames, as_numeric = as_numeric)
root
root <- "/media/raphael/bigass/simulations/EGS/genomes/"
root <- list.files(root)[1]
variables <- c("time", "Fst", "Gst", "Qst", "Cst")
by <- c(1, 3, 3, 3, 3)
dupl <- c(1, 1, 1, 1, 1)
parnames <- c("hsymmetry", "ecosel", "scaleI", "seed")
as_numeric <- parnames
data <- read_data(root, variables = variables, by = by, dupl = dupl, parnames = parnames, as_numeric = as_numeric)
root
root <- "/media/raphael/bigass/simulations/EGS/genomes/"
list.files(root)
root <- list.dirs(root, recursive = FALSE)[1]
variables <- c("time", "Fst", "Gst", "Qst", "Cst")
by <- c(1, 3, 3, 3, 3)
dupl <- c(1, 1, 1, 1, 1)
parnames <- c("hsymmetry", "ecosel", "scaleI", "seed")
as_numeric <- parnames
data <- read_data(root, variables = variables, by = by, dupl = dupl, parnames = parnames, as_numeric = as_numeric)
head(data)
?read_data
library(roxygen2)
roxygenize()
library(egssimtools)
?collect_sims
root <- "/media/raphael/bigass/simulations/EGS/genomes/"
data <- collect_sims(
root, variables, by = by, dupl = dupl, parnames = parnames,
as_numeric = as_numeric, check_extant = FALSE, level = 1
)
data
data
root
data <- collect_sims(
root, variables, by = by, dupl = dupl, parnames = parnames,
as_numeric = as_numeric, check_extant = FALSE, level = 1, pattern = "sim"
)
library(egssimtools)
data <- collect_sims(
root, variables, by = by, dupl = dupl, parnames = parnames,
as_numeric = as_numeric, check_extant = FALSE, level = 1, pattern = "sim"
)
data
data$sim
data$sim %>% unique
head(data)
data %>%
ggplot(aes(x = time, y = EI)) +
facet_grid(hsymmetry ~ scaleI1)
data %>%
ggplot(aes(x = time, y = Fst1)) +
facet_grid(hsymmetry ~ scaleI1)
library(ggsim)
data %>%
gglineplot(x = "time", y = "Fst1") +
facet_grid(hsymmetry ~ scaleI1)
data %>%
gglineplot(x = "time", y = "Fst1", line = "sim") +
facet_grid(hsymmetry ~ scaleI1)
data %>%
gglineplot(x = "time", y = "Cst1", line = "sim") +
facet_grid(hsymmetry ~ scaleI1)
data %>%
gglineplot(x = "time", y = "Gst1", line = "sim") +
facet_grid(hsymmetry ~ scaleI1)
data %>%
gglineplot(x = "time", y = "Qst1", line = "sim") +
facet_grid(hsymmetry ~ scaleI1)
data %>%
gglineplot(x = "time", y = "Cst1", line = "sim") +
facet_grid(hsymmetry ~ scaleI1)
data %>%
gglineplot(x = "time", y = "Cst1", line = "sim") %>%
ggfacet("hsymmetry", "scaleI1")
data %>%
gglineplot(x = "time", y = "Cst1", line = "sim") %>%
ggfacet("hsymmetry", "scaleI1", prepend = c(hsymmetry = "h = ", scaleI1 = "sigmaI = "))
data %>%
gglineplot(x = "time", y = "Cst1", line = "sim") %>%
ggfacet("hsymmetry", "scaleI1", prepend = c(hsymmetry = "h = ", scaleI1 = "sigma_i= "))
data %>%
gglineplot(x = "time", y = "Cst1", line = "sim") %>%
ggfacet("hsymmetry", "scaleI1", prepend = c(hsymmetry = "h = ", scaleI1 = "sigma_i = "))
variables <- c("time", "Fst", "Gst", "Qst", "Cst", "varG", "varA", "varN", "varT")
root <- list.dirs(root, recursive = FALSE)[1]
variables <- c("time", "Fst", "Gst", "Qst", "Cst", "varG", "varA", "varN", "varT")
by <- c(1, 3, 3, 3, 3, 3, 3, 3, 3)
dupl <- c(1, 1, 1, 1, 1, 1, 1, 1, 1)
parnames <- c("hsymmetry", "ecosel", "scaleI", "seed")
as_numeric <- parnames
data <- collect_sims(
root, variables, by = by, dupl = dupl, parnames = parnames,
as_numeric = as_numeric, check_extant = FALSE, level = 1, pattern = "sim"
)
data %>%
gglineplot(x = "time", y = "1", line = "sim") %>%
ggfacet("hsymmetry", "scaleI1", prepend = c(hsymmetry = "h = ", scaleI1 = "sigma_i = "))
data
rm(list = ls())
library(egssimtools)
library(tidyverse)
library(ggsim)
root <- "/media/raphael/bigass/simulations/EGS/genomes/"
root <- list.dirs(root, recursive = FALSE)[1]
variables <- c("time", "Fst", "Gst", "Qst", "Cst", "varG", "varA", "varN", "varT")
by <- c(1, 3, 3, 3, 3, 3, 3, 3, 3)
dupl <- c(1, 1, 1, 1, 1, 1, 1, 1, 1)
parnames <- c("hsymmetry", "ecosel", "scaleI", "seed")
as_numeric <- parnames
data <- collect_sims(
root, variables, by = by, dupl = dupl, parnames = parnames,
as_numeric = as_numeric, check_extant = FALSE, level = 1, pattern = "sim"
)
data %>%
gglineplot(x = "time", y = "1", line = "sim") %>%
ggfacet("hsymmetry", "scaleI1", prepend = c(hsymmetry = "h = ", scaleI1 = "sigma_i = "))
root <- "/media/raphael/bigass/simulations/EGS/genomes/"
root <- list.dirs(root, recursive = FALSE)[1]
variables <- c("time", "Fst", "Gst", "Qst", "Cst", "varG", "varA", "varN", "varT")
by <- c(1, 3, 3, 3, 3, 3, 3, 3, 3)
dupl <- c(1, 1, 1, 1, 1, 1, 1, 1, 1)
parnames <- c("hsymmetry", "ecosel", "scaleI", "seed")
as_numeric <- parnames
data <- collect_sims(
root, variables, by = by, dupl = dupl, parnames = parnames,
as_numeric = as_numeric, check_extant = FALSE, level = 1, pattern = "sim"
)
data %>%
gglineplot(x = "time", y = "1", line = "sim") %>%
ggfacet("hsymmetry", "scaleI1", prepend = c(hsymmetry = "h = ", scaleI1 = "sigma_i = "))
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
root <- list.dirs(root, recursive = FALSE)[1]
variables <- c("time", "Fst", "Gst", "Qst", "Cst", "varG", "varA", "varN", "varT")
by <- c(1, 3, 3, 3, 3, 3, 3, 3, 3)
dupl <- c(1, 1, 1, 1, 1, 1, 1, 1, 1)
parnames <- c("hsymmetry", "ecosel", "scaleI", "seed")
as_numeric <- parnames
data <- collect_sims(
root, variables, by = by, dupl = dupl, parnames = parnames,
as_numeric = as_numeric, check_extant = FALSE, level = 1, pattern = "sim"
)
root
root <- "/media/raphael/bigass/simulations/EGS/genomes/"
variables <- c("time", "Fst", "Gst", "Qst", "Cst", "varG", "varA", "varN", "varT")
by <- c(1, 3, 3, 3, 3, 3, 3, 3, 3)
dupl <- c(1, 1, 1, 1, 1, 1, 1, 1, 1)
parnames <- c("hsymmetry", "ecosel", "scaleI", "seed")
as_numeric <- parnames
data <- collect_sims(
root, variables, by = by, dupl = dupl, parnames = parnames,
as_numeric = as_numeric, check_extant = FALSE, level = 1, pattern = "sim"
)
data %>%
gglineplot(x = "time", y = "1", line = "sim") %>%
ggfacet("hsymmetry", "scaleI1", prepend = c(hsymmetry = "h = ", scaleI1 = "sigma_i = "))
data
data %>%
gglineplot(x = "time", y = "1", line = "sim")
data %>%
gglineplot(x = "time", y = "varA1", line = "sim") %>%
ggfacet("hsymmetry", "scaleI1", prepend = c(hsymmetry = "h = ", scaleI1 = "sigma_i = "))
data %>%
gglineplot(x = "time", y = "varN1", line = "sim") %>%
ggfacet("hsymmetry", "scaleI1", prepend = c(hsymmetry = "h = ", scaleI1 = "sigma_i = "))
data %>%
gglineplot(x = "time", y = "Cst1", line = "sim") %>%
ggfacet("hsymmetry", "scaleI1", prepend = c(hsymmetry = "h = ", scaleI1 = "sigma_i = "))
all(data$varN1 >= 0)
data %>%
gglineplot(x = "time", y = "Cst2", line = "sim") %>%
ggfacet("hsymmetry", "scaleI1", prepend = c(hsymmetry = "h = ", scaleI1 = "sigma_i = "))
data %>%
gglineplot(x = "time", y = "Cst3", line = "sim") %>%
ggfacet("hsymmetry", "scaleI1", prepend = c(hsymmetry = "h = ", scaleI1 = "sigma_i = "))
data <- collect_sims(root, c("time", "genome_Cst"), by = c(1, 1), dupl = c(300, 1),
parnames = parnames, check_extant = FALSE, level = 1, pattern = "sim")
head(data)
data %>%
filter(time == 19900) %>%
mutate(locus = seq(n()))
data %>%
filter(time == 19900) %>%
mutate(locus = seq(n())) %>%
ggplot(aes(x = locus, y = genome_Cst)) +
geom_point() %>%
ggfacet("hsymmetry", "scaleI1", prepend = c(hsymmetry = "h = ", scaleI1 = "sigma_i = "))
p <- data %>%
filter(time == 19900) %>%
mutate(locus = seq(n())) %>%
ggplot(aes(x = locus, y = genome_Cst)) +
geom_point()
ggfacet(p, "hsymmetry", "scaleI1", prepend = c(hsymmetry = "h = ", scaleI1 = "sigma_i = "))
any(data$genome_Cst < 0)
rm(list = ls())
library(egssimtools)
library(tidyverse)
root <- "/media/raphael/bigass/simulations/EGS/mutator/"
variables <- c("time", "EI", "RI", "SI")
parnames <- c("hsymmetry", "ecosel", "scaleA", "scaleI")
?collect_sims
data <- collect_sims(root, level = 1, pattern = "sim_", variables = variables,
by = c(1, 3, 3, 3), parnames = parnames, check_extant = TRUE,
as_numeric = parnames)
library(egssimtools)
data <- collect_sims(root, level = 1, pattern = "sim_", variables = variables,
by = c(1, 3, 3, 3), parnames = parnames, check_extant = TRUE,
as_numeric = parnames)
data
root <- "/media/raphael/bigass/simulations/EGS/mutator/"
variables <- c("time", "EI", "RI", "SI")
parnames <- c("hsymmetry", "ecosel", "scaleA", "scaleI")
data <- collect_sims(root, level = 1, pattern = "sim_", variables = variables,
by = c(1, 3, 3, 3), parnames = parnames, check_extant = TRUE,
as_numeric = parnames)
data <- collect_sims(root, level = 2, pattern = "sim_", variables = variables,
by = c(1, 3, 3, 3), parnames = parnames, check_extant = TRUE,
as_numeric = parnames)
data <- collect_sims(root, level = 2, pattern = "sim_", variables = variables,
parnames = parnames, check_extant = TRUE,
as_numeric = parnames)
rm(list = ls())
library(egssimtools)
library(tidyverse)
library(ggsim)
library(patchwork)
# Read the data
root <- "/media/raphael/bigass/simulations/EGS/genomes/"
data <- readRDS(paste0(root, "simulations.rds"))
backup <- data
data <- backup
# Function to plot one pairwise scatterplot
plot_this <- function(data, x, y, hsymmetry = TRUE, shape = 21) {
final <- data %>% filter(time == max(data$time))
p <- data %>%
ggplot(data = data, mapping = aes(x = get(x), y = get(y))) +
aes(color = scaleI1, alpha = seed, fill = scaleI1) +
geom_path()
if (hsymmetry) {
p <- p + geom_point(data = final, color = "black", size = 4, alpha = 1)
} else {
p <- p + geom_point(
data = final, color = "black", size = 4, alpha = 1, shape = shape
)
}
p <- p +
scale_color_manual(
name = expression(sigma[I]), values = c("firebrick1", "deepskyblue4"),
labels =  c("0", "1")
) +
scale_fill_manual(
name = expression(sigma[I]), values = c("firebrick1", "deepskyblue4"),
labels =  c("0", "1")
) +
scale_alpha_manual(
values = runif(nlevels(factor(data$seed)), min = 0.79, max = 0.81)
) +
theme_bw() +
guides(alpha = FALSE, fill = FALSE) +
labs(x = x, y = y)
if (hsymmetry) {
p <- p +
aes(shape = hsymmetry, lty = hsymmetry) +
scale_shape_manual(name = "h", values = c(21, 24), labels = c("0", "1")) +
scale_linetype_manual(name = "h", values = c(1, 2), labels = c("0", "1"))
}
p
}
# Function to produce a genetic differentiation space figure (for a given architecture)
combine_plots <- function(data, hsymmetry = TRUE, shape = 21) {
# Rearrange the data to wide-format
cols <- c("seed", "scaleI1", "location", "time", "genome_Fst")
if (hsymmetry) cols <- c(cols, "hsymmetry")
data <- data %>%
select_at(cols) %>%
spread_(key_col = "location", value_col = "genome_Fst")
# Perform PCA
pca <- data[, (length(cols) - 1):ncol(data)] %>%
as.matrix %>%
prcomp(center = TRUE, scale = TRUE)
# Check out the variance explained
scree <- tibble(sdev = pca$sdev) %>%
mutate(pc = 1:nrow(.)) %>%
ggplot(aes(x = pc, y = sdev)) +
geom_bar(stat = "identity") +
theme_bw() +
labs(x = "Principal component", y = "Standard deviation") +
ggtitle("Scree plot")
scree
# The components are very even, suggesting this architecture
# varies in Fst along many different combinations of genes
# But do simulations cluster in this space?
data <- cbind(data, pca$x %>% data.frame)
# Make each pairwise scatterplot in a row
pairs <- 1:5
pairs <- expand.grid(pairs, pairs)
pairs <- pairs[pairs[, 1] != pairs[, 2], ]
pairs[pairs[, 1] > pairs[, 2], ] <- pairs[pairs[, 1] > pairs[, 2], c(2, 1)]
pairs[, 1] <- paste0("PC", pairs[, 1])
pairs[, 2] <- paste0("PC", pairs[, 2])
pairs <- pairs %>% distinct()
p <- map2(pairs[, 1], pairs[, 2], ~ plot_this(data, .x, .y, hsymmetry, shape))
# Assemble the plots with patchwork
fig <- p %>% wrap_plots() +
plot_layout(guides = "collect") +
plot_annotation(title = "Genetic differentiation space")
fig <- fig / scree + plot_layout(heights = c(4, 1))
fig
}
# Split by architecture and apply the plotting function
newdata <- data %>%
group_by(archfile) %>%
nest() %>%
mutate(figure = map(data, combine_plots))
# Check one plot
newdata$figure[[1]]
# Saving function
save_this <- function(x, y) {
figname <- sprintf("gendiffspace_timeseries_%s.png", gsub(".txt", "", x))
ggsave(figname, y, width = 8, height = 7, dpi = 400)
}
# Further split by ecological mode
newdata2 <- data %>%
group_by(archfile, hsymmetry) %>%
nest() %>%
mutate(shape = ifelse(hsymmetry == 0, 21, 24)) %>%
mutate(figure = map2(data, shape, ~ combine_plots(.x, hsymmetry = FALSE, shape = .y)))
newdata
newdata2
newdata2$figure[[2]]
newdata2
figname <- "gendiffspace_timeseries_%s_%s.png"
newdata2 %>%
mutate(figname = sprintf(figname, gsub(".txt", "", archfile), hsymmetry))
figname <- "gendiffspace_timeseries_%s_h_%s.png"
neadata2 <- newdata2 %>%
mutate(figname = sprintf(figname, gsub(".txt", "", archfile), hsymmetry))
newdata2 %>%
mutate(figname = sprintf(figname, gsub(".txt", "", archfile), hsymmetry))
newdata2 <- newdata2 %>%
mutate(figname = sprintf(figname, gsub(".txt", "", archfile), hsymmetry))
# Saving function
save_this2 <- function(figure, figname) {
ggsave(figname, figure, width = 8, height = 7, dpi = 400)
}
# Save the figures
with(newdata2, walk2(figure, figname, save_this2))
