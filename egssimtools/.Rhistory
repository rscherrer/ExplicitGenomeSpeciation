data <- read_data(root, c("time", y), dupl = c(nloci, 1), architecture = TRUE)
if (is.null(t)) t <- last(data$time)
data <- data %>% filter(time == t)
ggplot(data, aes(x = get(x), y = get(y))) +
geom_point() +
theme_bw() +
labs(x = x, y = y)
}
dplot_genome_heatmap <- function(root, y, x = "location") {
library(ggplot2)
time <- read_data(root, "time")
X <- read_data(root, y)
nloci <- nrow(X) / nrow(time)
data <- read_data(root, c("time", y), dupl = c(nloci, 1), architecture = TRUE)
ggplot(data, aes(x = time, y = get(x), fill = get(y))) +
geom_tile() +
theme_bw() +
labs(y = x, fill = y)
}
dplot_genome_heatmap(root, "genome_Fst", x = "locus")
dplot_genome_heatmap <- function(root, y) {
library(ggplot2)
time <- read_data(root, "time")
X <- read_data(root, y)
nloci <- nrow(X) / nrow(time)
data <- read_data(root, c("time", y), dupl = c(nloci, 1), architecture = TRUE)
ggplot(data, aes(x = time, y = locus, fill = get(y))) +
geom_tile() +
theme_bw() +
labs(fill = y)
}
dplot_genome_heatmap(root, "genome_Fst", x = "locus")
dplot_genome_heatmap(root, "genome_Fst")
#' Diagnostic genome scan
#'
#' Quick-plots a genome scan of a given variable at a given time point
#'
#' @param root Path to the simulation folder
#' @param y Name of the variable to plot
#' @param x Optional x-axis, defaults to locus location but could also be e.g. "locus" for locus identity
#' @param t Time point at which to show the scan. If unspecified, last time point.
#'
#' @return A ggplot
#'
#' @export
dplot_genome_scan <- function(root, y, x = "location", t = NULL) {
library(ggplot2)
time <- read_data(root, "time")
X <- read_data(root, y)
nloci <- nrow(X) / nrow(time)
data <- read_data(root, c("time", y), dupl = c(nloci, 1), architecture = TRUE)
if (is.null(t)) t <- last(data$time)
data <- data %>% filter(time == t)
ggplot(data, aes(x = get(x), y = get(y))) +
geom_point() +
theme_bw() +
labs(x = x, y = y)
}
#' Diagnostic genome heatmap through time
#'
#' Quick-plots a given variable across the genome and through time
#'
#' @param root Path to the simulation folder
#' @param y Name of the variable to plot.
#'
#' @return A ggplot
#'
#' @export
dplot_genome_heatmap <- function(root, y) {
library(ggplot2)
time <- read_data(root, "time")
X <- read_data(root, y)
nloci <- nrow(X) / nrow(time)
data <- read_data(root, c("time", y), dupl = c(nloci, 1), architecture = TRUE)
ggplot(data, aes(x = time, y = locus, fill = get(y))) +
geom_tile() +
theme_bw() +
labs(fill = y)
}
dplot_genome_scan(root, y = "genome_Fst", x = "locus")
dplot_genome_heatmap(root, "genome_Fst")
dplot_genome_scan(root, y = "genome_Fst")
dplot_genome_scan(root, y = "genome_Fst")
#' Diagnostic genome scan
#'
#' Quick-plots a genome scan of a given variable at a given time point
#'
#' @param root Path to the simulation folder
#' @param y Name of the variable to plot
#' @param x Optional x-axis, defaults to locus identity but could also be e.g. "location" for locus position along the genome
#' @param t Time point at which to show the scan. If unspecified, last time point.
#'
#' @return A ggplot
#'
#' @export
dplot_genome_scan <- function(root, y, x = "locus", t = NULL) {
library(ggplot2)
time <- read_data(root, "time")
X <- read_data(root, y)
nloci <- nrow(X) / nrow(time)
data <- read_data(root, c("time", y), dupl = c(nloci, 1), architecture = TRUE)
if (is.null(t)) t <- last(data$time)
data <- data %>% filter(time == t)
ggplot(data, aes(x = get(x), y = get(y))) +
geom_point() +
theme_bw() +
labs(x = x, y = y)
}
library(egssimtools)
?scale_fill_continuous
dplot_genome_violin <- function(root, y, x = "trait") {
library(ggplot2)
time <- read_data(root, "time")
X <- read_data(root, y)
nloci <- nrow(X) / nrow(time)
data <- read_data(root, c("time", y), dupl = c(nloci, 1), architecture = TRUE)
if (is.null(t)) t <- last(data$time)
data <- data %>% filter(time == t)
ggplot(data, aes(x = get(x), y = get(y))) +
geom_violin() +
theme_bw() +
labs(x = x, y = y)
}
dplot_genome_violin(root, y = "genome_Fst", x = "trait")
dplot_genome_violin <- function(root, y, x = "trait") {
library(ggplot2)
time <- read_data(root, "time")
X <- read_data(root, y)
nloci <- nrow(X) / nrow(time)
data <- read_data(root, c("time", y), dupl = c(nloci, 1), architecture = TRUE)
if (is.null(t)) t <- last(data$time)
data <- data %>% filter(time == t)
ggplot(data, aes(x = factor(get(x)), y = get(y))) +
geom_violin() +
theme_bw() +
labs(x = x, y = y)
}
dplot_genome_violin(root, y = "genome_Fst", x = "trait")
dplot_genome_violin <- function(root, y, x = NULL) {
library(ggplot2)
time <- read_data(root, "time")
X <- read_data(root, y)
nloci <- nrow(X) / nrow(time)
data <- read_data(root, c("time", y), dupl = c(nloci, 1), architecture = TRUE)
if (is.null(t)) t <- last(data$time)
if (is.null(x)) {
data$x <- "1"
x <- "x"
}
data <- data %>% filter(time == t)
ggplot(data, aes(x = factor(get(x)), y = get(y))) +
geom_violin() +
theme_bw() +
labs(x = x, y = y)
}
dplot_genome_violin(root, y = "genome_Fst", x = "trait")
dplot_genome_violin(root, y = "genome_Fst")
#' Diagnostic violin plot
#'
#' Quick-plots a variable across the genome, possibly split between categories
#'
#' @param root Path to the simulation folder
#' @param y Name of the variable to plot
#' @param x Optional grouping variable
#' @param t Time point at which to show the scan. If unspecified, last time point.
#'
#' @return A ggplot
#'
#' @export
dplot_genome_violin <- function(root, y, x = NULL) {
library(ggplot2)
time <- read_data(root, "time")
X <- read_data(root, y)
nloci <- nrow(X) / nrow(time)
data <- read_data(root, c("time", y), dupl = c(nloci, 1), architecture = TRUE)
if (is.null(t)) t <- last(data$time)
if (is.null(x)) {
data$x <- rep("1", nrow(data))
x <- "x"
}
data <- data %>% filter(time == t)
ggplot(data, aes(x = factor(get(x)), y = get(y))) +
geom_violin() +
theme_bw() +
labs(x = x, y = y)
}
dplot_genome_violin(root, y = "genome_Fst")
#' Diagnostic violin plot
#'
#' Quick-plots a variable across the genome, possibly split between categories
#'
#' @param root Path to the simulation folder
#' @param y Name of the variable to plot
#' @param x Optional grouping variable
#' @param t Time point at which to show the scan. If unspecified, last time point.
#'
#' @return A ggplot
#'
#' @export
dplot_genome_violin <- function(root, y, x = NULL) {
library(ggplot2)
time <- read_data(root, "time")
X <- read_data(root, y)
nloci <- nrow(X) / nrow(time)
data <- read_data(root, c("time", y), dupl = c(nloci, 1), architecture = TRUE)
if (is.null(t)) t <- last(data$time)
if (is.null(x)) {
data$x <- rep(1, nrow(data))
x <- "x"
}
data <- data %>% filter(time == t)
ggplot(data, aes(x = factor(get(x)), y = get(y))) +
geom_violin() +
theme_bw() +
labs(x = x, y = y)
}
dplot_genome_violin(root, y = "genome_Fst")
#' Diagnostic violin plot
#'
#' Quick-plots a variable across the genome, possibly split between categories
#'
#' @param root Path to the simulation folder
#' @param y Name of the variable to plot
#' @param x Optional grouping variable
#' @param t Time point at which to show the scan. If unspecified, last time point.
#'
#' @return A ggplot
#'
#' @export
dplot_genome_violin <- function(root, y, x = NULL) {
library(ggplot2)
time <- read_data(root, "time")
X <- read_data(root, y)
nloci <- nrow(X) / nrow(time)
data <- read_data(root, c("time", y), dupl = c(nloci, 1), architecture = TRUE)
if (is.null(t)) t <- last(data$time)
if (is.null(x)) {
x.. <- "1"
x <- "x.."
}
data <- data %>% filter(time == t)
ggplot(data, aes(x = factor(get(x)), y = get(y))) +
geom_violin() +
theme_bw() +
labs(x = x, y = y)
}
dplot_genome_violin(root, y = "genome_Fst")
#' Diagnostic violin plot
#'
#' Quick-plots a variable across the genome, possibly split between categories
#'
#' @param root Path to the simulation folder
#' @param y Name of the variable to plot
#' @param x Optional grouping variable
#' @param t Time point at which to show the scan. If unspecified, last time point.
#'
#' @return A ggplot
#'
#' @export
dplot_genome_violin <- function(root, y, x = NULL) {
library(ggplot2)
time <- read_data(root, "time")
X <- read_data(root, y)
nloci <- nrow(X) / nrow(time)
data <- read_data(root, c("time", y), dupl = c(nloci, 1), architecture = TRUE)
if (is.null(t)) t <- last(data$time)
rmaxis <- FALSE
if (is.null(x)) {
x.. <- "1"
x <- "x.."
rmaxis <- TRUE
}
data <- data %>% filter(time == t)
p <- ggplot(data, aes(x = factor(get(x)), y = get(y))) +
geom_violin() +
theme_bw() +
labs(x = x, y = y)
if (rmaxis) p + theme(axis.ticks.x = element_blank())
}
dplot_genome_violin(root, y = "genome_Fst")
#' Diagnostic violin plot
#'
#' Quick-plots a variable across the genome, possibly split between categories
#'
#' @param root Path to the simulation folder
#' @param y Name of the variable to plot
#' @param x Optional grouping variable
#' @param t Time point at which to show the scan. If unspecified, last time point.
#'
#' @return A ggplot
#'
#' @export
dplot_genome_violin <- function(root, y, x = NULL) {
library(ggplot2)
time <- read_data(root, "time")
X <- read_data(root, y)
nloci <- nrow(X) / nrow(time)
data <- read_data(root, c("time", y), dupl = c(nloci, 1), architecture = TRUE)
if (is.null(t)) t <- last(data$time)
rmaxis <- FALSE
if (is.null(x)) {
x.. <- "1"
x <- "x.."
rmaxis <- TRUE
}
data <- data %>% filter(time == t)
p <- ggplot(data, aes(x = factor(get(x)), y = get(y))) +
geom_violin() +
theme_bw() +
labs(x = x, y = y)
if (rmaxis) p <- p + theme(
axis.ticks.x = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank()
)
return(p)
}
dplot_genome_violin(root, y = "genome_Fst")
dplot_genome_violin(root, y = "genome_Fst", x = "trait")
library(egssimtools)
dplot_population_histogram <- function(root, y, by = 1, j = 1) {
}
dplot_population_histogram(root, y = "individual_trait", by = 3, j = 3)
dplot_population_histogram <- function(root, y, by = 1, j = 1) {
library(ggplot2)
data <- read_data(root, c("time", y), by = c(1, by))
}
dplot_population_histogram(root, y = "individual_trait", by = 3, j = 3)
?read_data
dplot_population_histogram <- function(root, y, by = 1, j = 1) {
library(ggplot2)
data <- read_data(root, c("time", y), by = c(1, by), dupl = list("population_size", 1))
}
dplot_population_histogram(root, y = "individual_trait", by = 3, j = 3)
dplot_population_histogram <- function(root, y, by = 1, j = 1, t = NULL) {
library(ggplot2)
data <- read_data(root, c("time", y), by = c(1, by), dupl = list("population_size", 1))
data <- data[, c(1, j + 1)]
if (is.null(t)) t <- last(data$time)
data <- data %>% filter(time == t)
}
dplot_population_histogram(root, y = "individual_trait", by = 3, j = 3)
dplot_population_density <- function(root, y, by = 1, j = 1, t = NULL) {
library(ggplot2)
data <- read_data(root, c("time", y), by = c(1, by), dupl = list("population_size", 1))
data <- data[, c(1, j + 1)]
if (is.null(t)) t <- last(data$time)
data <- data %>% filter(time == t)
ggplot(data, aes(x = get(colnames(data)[2]))) +
geom_density()
}
dplot_population_density(root, y = "individual_trait", by = 3, j = 3)
dplot_population_density <- function(root, y, by = 1, j = 1, t = NULL) {
library(ggplot2)
data <- read_data(root, c("time", y), by = c(1, by), dupl = list("population_size", 1))
data <- data[, c(1, j + 1)]
if (is.null(t)) t <- last(data$time)
data <- data %>% filter(time == t)
ggplot(data, aes(x = get(colnames(data)[2]))) +
geom_density() +
theme_bw()
}
dplot_population_density(root, y = "individual_trait", by = 3, j = 3)
dplot_population_density(root, y = "individual_trait", by = 3, j = 1)
dplot_population_density <- function(root, y, by = 1, j = 1, t = NULL) {
library(ggplot2)
data <- read_data(root, c("time", y), by = c(1, by), dupl = list("population_size", 1))
data <- data[, c(1, j + 1)]
if (is.null(t)) t <- last(data$time)
data <- data %>% filter(time == t)
ggplot(data, aes(x = get(colnames(data)[2]))) +
geom_density() +
theme_bw() +
xlab(colnames(data)[2])
}
dplot_population_density(root, y = "individual_trait", by = 3, j = 1)
#' Diagnose density of a given variable across the population
#'
#' @param root Path to the simulation folder
#' @param y Variable to plot the density for
#' @param by How many columns to split the variable into? See `?read_data`.
#' @param j If the variable is splitted, which column to show?
#' @param t Optional time point to filter. Defaults to the last time point
#'
#' @return A ggplot
#'
#' @export
dplot_population_density <- function(root, y, by = 1, j = 1, t = NULL) {
library(ggplot2)
data <- read_data(root, c("time", y), by = c(1, by), dupl = list("population_size", 1))
data <- data[, c(1, j + 1)]
if (is.null(t)) t <- last(data$time)
data <- data %>% filter(time == t)
ggplot(data, aes(x = get(colnames(data)[2]))) +
geom_density() +
theme_bw() +
xlab(colnames(data)[2])
}
dplot_population_density(root, y = "individual_trait", by = 3, j = 1)
library(egssimtools)
source('~/Documents/ExplicitGenomeSpeciation/egssimtools/R/dplot_population_density.R')
dplot_population_density <- function(root, y, by = 1, j = 1, t = NULL, fill = NULL) {
library(ggplot2)
data <- read_data(root, c("time", y), by = c(1, by), dupl = list("population_size", 1))
data <- data[, c(1, j + 1)]
if (is.null(t)) t <- last(data$time)
data <- data %>% filter(time == t)
ggplot(data, aes(x = get(colnames(data)[2]))) +
geom_density(fill = fill, alpha = 0.5) +
theme_bw() +
xlab(colnames(data)[2])
}
dplot_population_density(root, y = "individual_trait", by = 3, j = 1)
#' Diagnose density of a given variable across the population
#'
#' @param root Path to the simulation folder
#' @param y Variable to plot the density for
#' @param by How many columns to split the variable into? See `?read_data`.
#' @param j If the variable is splitted, which column to show?
#' @param t Optional time point to filter. Defaults to the last time point
#'
#' @return A ggplot
#'
#' @export
dplot_population_density <- function(root, y, by = 1, j = 1, t = NULL, fill = "lightgrey") {
library(ggplot2)
data <- read_data(root, c("time", y), by = c(1, by), dupl = list("population_size", 1))
data <- data[, c(1, j + 1)]
if (is.null(t)) t <- last(data$time)
data <- data %>% filter(time == t)
ggplot(data, aes(x = get(colnames(data)[2]))) +
geom_density(fill = fill) +
theme_bw() +
xlab(colnames(data)[2])
}
dplot_population_density(root, y = "individual_trait", by = 3, j = 1)
library(egssimtools)
dplot_population_bin2d <- function(root, y, by = 1, j = 1) {
library(ggplot2)
data <- read_data(root, c("time", y), by = c(1, by), dupl = list("population_size", 1))
data <- data[, c(1, j + 1)]
if (is.null(t)) t <- last(data$time)
ggplot(data, aes(x = time, y = get(colnames(data)[2]))) +
geom_bin2d(bins = 50) +
theme_bw() +
xlab(colnames(data)[2])
}
dplot_population_bin2d(root, y = "individual_trait", by = 3, j = 1)
#' Diagnose density of a given variable across the population through time
#'
#' @param root Path to the simulation folder
#' @param y Variable to plot the density for
#' @param by How many columns to split the variable into? See `?read_data`.
#' @param j If the variable is splitted, which column to show?
#' @param bins Number of bins for `geom_bin2d`
#'
#' @return A ggplot
#'
#' @export
dplot_population_bin2d <- function(root, y, by = 1, j = 1, bins = 50) {
library(ggplot2)
data <- read_data(root, c("time", y), by = c(1, by), dupl = list("population_size", 1))
data <- data[, c(1, j + 1)]
if (is.null(t)) t <- last(data$time)
ggplot(data, aes(x = time, y = get(colnames(data)[2]))) +
geom_bin2d(bins = bins) +
theme_bw() +
xlab(colnames(data)[2])
}
dplot_population_bin2d(root, y = "individual_trait", by = 3, j = 1)
#' Diagnose density of a given variable across the population through time
#'
#' @param root Path to the simulation folder
#' @param y Variable to plot the density for
#' @param by How many columns to split the variable into? See `?read_data`.
#' @param j If the variable is splitted, which column to show?
#' @param bins Number of bins for `geom_bin2d`
#'
#' @return A ggplot
#'
#' @export
dplot_population_bin2d <- function(root, y, by = 1, j = 1, bins = 50) {
library(ggplot2)
data <- read_data(root, c("time", y), by = c(1, by), dupl = list("population_size", 1))
data <- data[, c(1, j + 1)]
if (is.null(t)) t <- last(data$time)
ggplot(data, aes(x = time, y = get(colnames(data)[2]))) +
geom_bin2d(bins = bins) +
theme_bw() +
ylab(colnames(data)[2])
}
dplot_population_bin2d(root, y = "individual_trait", by = 3, j = 1)
library(egssimtools)
dplot_simulation_line <- function(root, y, x = "time", by = 1, j = 1, color = "black") {
library(ggplot2)
data <- read_data(root, c(x, y), by = c(1, by))
data <- data[, c(1, j + 1)]
if (is.null(t)) t <- last(data$time)
ggplot(data, aes(x = get(x), y = get(colnames(data)[2]))) +
geom_path(color = color) +
theme_bw() +
labs(x = x, y = colnames(data)[2])
}
dplot_simulation_line(root, y = "EI", by = 1, j = 1)
library(egssimtools)
dplot_simulation_line(root, y = "Fst", by = 3, j = 1)
library(egssimtools)
library(roxygen2)
roxygenize()
library(egssimtools)
devtools::build_vignettes()
devtools::build_vignettes()
