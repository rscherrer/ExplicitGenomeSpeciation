#'
#' @examples
#'
#' \dontrun{
#'
#' is_extinct("data/example_1")
#'
#' }
#'
#' @export
is_extinct <- function(root, logfile = "log.txt", slurm = FALSE) {
if (slurm) logfile <- "^slurm.*out"
file_id <- grep(logfile, list.files(root))
if (length(file_id) == 0) stop("log file not found")
log_file <- list.files(root)[file_id[length(file_id)]]
log_lines <- readLines(file.path(root, log_file))
return(length(grep("extinct", log_lines)) > 0)
}
#' Is a simulation extant?
#'
#' Checks that the simulation is non-missing, succesfully completed and did
#' not go extinct.
#'
#' @param root Path to the simulation folder
#' @param logfile Optional log file name
#' @param slurm Whether to check SLURM output files
#'
#' @return A logical
#'
#' @examples
#'
#' \dontrun{
#'
#' is_extant("data/example_1", slurm = FALSE)
#'
#' }
#'
#' @export
is_extant <- function(root, logfile = "log.txt", slurm = FALSE) {
if (is_missing(root)) return(FALSE)
if (slurm & !is_complete(root)) return(FALSE)
if (is_extinct(root, ...)) return(FALSE)
return(TRUE)
}
#' Find extant simulations
#'
#' Find simulations that did not crash, that successfully completed and that did
#' not go extinct
#'
#' @param roots Vector of simulation folders
#'
#' @return A character vector
#'
#' @examples
#'
#' \dontrun{
#'
#' roots <- fetch_dirs("data", "example", 1)
#' find_extant(roots)
#'
#' }
#'
#' @export
find_extant <- function(roots) {
extant <- purrr::map_lgl(roots, is_extant)
return(roots[extant])
}
roots <- fetch_dirs("data", "example", 1)
find_extant(roots)
rm(list = ls())
library(egssimtools)
#' Is a simulation missing?
#'
#' Checks for the presence of `.dat` files
#'
#' @param root Path to the simulation folder
#'
#' @return A logical
#'
#' @examples
#'
#' \dontrun{
#'
#' is_missing("data/example_1")
#'
#' }
#'
#' @export
is_missing <- function(root) {
if (length(grep(".dat$", list.files(root))) == 0) return(TRUE)
return(FALSE)
}
#' Read the SLURM status of a simulation
#'
#' Checks the slurm output file
#'
#' @param root Path to the simulation folder
#'
#' @return A character
#'
#' @examples
#'
#' \dontrun{
#'
#' read_slurm_status("data/example_1") # should give an error because examples
#' # were not run using SLURM
#'
#' }
#'
#' @export
read_slurm_status <- function(root) {
file_id <- grep("^slurm.*out$", list.files(root))
if (length(file_id) == 0) stop("SLURM output file not found")
slurm_file <- list.files(root)[file_id[length(file_id)]]
slurm_lines <- readLines(file.path(root, slurm_file))
i <- grep("^State", slurm_lines)
if (length(i) == 0) {
stop(paste("row starting with 'status' not found in", slurm_file))
}
status_line <- slurm_lines[i]
status <- gsub("^.*\\: ", "", status_line)
return(status)
}
#' Is a simulation completed?
#'
#' Checks for the word "COMPLETED" in the SLURM output
#'
#' @param root Path to the simulation folder
#'
#' @return A logical
#'
#' @examples
#'
#' \dontrun{
#'
#' # Should return an error because examples were not run using SLURM
#' is_complete("data/example_1")
#'
#' }
#'
#' @export
is_complete <- function(root) {
if (read_slurm_status(root) == "COMPLETED") return(TRUE)
return(FALSE)
}
#' Is a simulation extinct?
#'
#' Checks for the word "extinct" in the log file
#'
#' @param root Path to the simulation folder
#' @param logfile Optional log file name
#' @param slurm Whether to check a SLURM output file as log file
#'
#' @return A logical
#'
#' @examples
#'
#' \dontrun{
#'
#' is_extinct("data/example_1")
#'
#' }
#'
#' @export
is_extinct <- function(root, logfile = "log.txt", slurm = FALSE) {
if (slurm) logfile <- "^slurm.*out"
file_id <- grep(logfile, list.files(root))
if (length(file_id) == 0) stop("log file not found")
log_file <- list.files(root)[file_id[length(file_id)]]
log_lines <- readLines(file.path(root, log_file))
return(length(grep("extinct", log_lines)) > 0)
}
#' Is a simulation extant?
#'
#' Checks that the simulation is non-missing, succesfully completed and did
#' not go extinct.
#'
#' @param root Path to the simulation folder
#' @param logfile Optional log file name
#' @param slurm Whether to check SLURM output files
#'
#' @return A logical
#'
#' @examples
#'
#' \dontrun{
#'
#' is_extant("data/example_1", slurm = FALSE)
#'
#' }
#'
#' @export
is_extant <- function(root, logfile = "log.txt", slurm = FALSE) {
if (is_missing(root)) return(FALSE)
if (slurm & !is_complete(root)) return(FALSE)
if (is_extinct(root, logfile = logfile, slurm = slurm)) return(FALSE)
return(TRUE)
}
#' Find extant simulations
#'
#' Find simulations that did not crash, that successfully completed and that did
#' not go extinct
#'
#' @param roots Vector of simulation folders
#'
#' @return A character vector
#'
#' @examples
#'
#' \dontrun{
#'
#' roots <- fetch_dirs("data", "example", 1)
#' find_extant(roots)
#'
#' }
#'
#' @export
find_extant <- function(roots) {
extant <- purrr::map_lgl(roots, is_extant)
return(roots[extant])
}
roots <- fetch_dirs("data", "example", 1)
find_extant(roots)
roots
is_extant(roots[1])
is_extinct(roots[1])
is_complete(roots[1])
rm(list = ls())
library(egssimtools)
#' Is a simulation missing?
#'
#' Checks for the presence of `.dat` files
#'
#' @param root Path to the simulation folder
#'
#' @return A logical
#'
#' @examples
#'
#' \dontrun{
#'
#' is_missing("data/example_1")
#'
#' }
#'
#' @export
is_missing <- function(root) {
if (length(grep(".dat$", list.files(root))) == 0) return(TRUE)
return(FALSE)
}
#' Read the SLURM status of a simulation
#'
#' Checks the slurm output file
#'
#' @param root Path to the simulation folder
#'
#' @return A character
#'
#' @examples
#'
#' \dontrun{
#'
#' read_slurm_status("data/example_1") # should give an error because examples
#' # were not run using SLURM
#'
#' }
#'
#' @export
read_slurm_status <- function(root) {
file_id <- grep("^slurm.*out$", list.files(root))
if (length(file_id) == 0) stop("SLURM output file not found")
slurm_file <- list.files(root)[file_id[length(file_id)]]
slurm_lines <- readLines(file.path(root, slurm_file))
i <- grep("^State", slurm_lines)
if (length(i) == 0) {
stop(paste("row starting with 'status' not found in", slurm_file))
}
status_line <- slurm_lines[i]
status <- gsub("^.*\\: ", "", status_line)
return(status)
}
#' Is a simulation completed?
#'
#' Checks for the word "COMPLETED" in the SLURM output
#'
#' @param root Path to the simulation folder
#'
#' @return A logical
#'
#' @examples
#'
#' \dontrun{
#'
#' # Should return an error because examples were not run using SLURM
#' is_complete("data/example_1")
#'
#' }
#'
#' @export
is_complete <- function(root) {
if (read_slurm_status(root) == "COMPLETED") return(TRUE)
return(FALSE)
}
#' Is a simulation extinct?
#'
#' Checks for the word "extinct" in the log file
#'
#' @param root Path to the simulation folder
#' @param logfile Optional log file name
#' @param slurm Whether to check a SLURM output file as log file
#'
#' @return A logical
#'
#' @examples
#'
#' \dontrun{
#'
#' is_extinct("data/example_1")
#'
#' }
#'
#' @export
is_extinct <- function(root, logfile = "log.txt", slurm = FALSE) {
if (slurm) logfile <- "^slurm.*out"
file_id <- grep(logfile, list.files(root))
if (length(file_id) == 0) stop("log file not found")
log_file <- list.files(root)[file_id[length(file_id)]]
log_lines <- readLines(file.path(root, log_file))
return(length(grep("extinct", log_lines)) > 0)
}
#' Is a simulation extant?
#'
#' Checks that the simulation is non-missing, succesfully completed and did
#' not go extinct.
#'
#' @param root Path to the simulation folder
#' @param logfile Optional log file name
#' @param slurm Whether to check SLURM output files
#'
#' @return A logical
#'
#' @examples
#'
#' \dontrun{
#'
#' is_extant("data/example_1", slurm = FALSE)
#'
#' }
#'
#' @export
is_extant <- function(root, logfile = "log.txt", slurm = FALSE) {
if (is_missing(root)) return(FALSE)
if (slurm) if(!is_complete(root)) return(FALSE)
return(!is_extinct(root, logfile = logfile, slurm = slurm))
}
#' Find extant simulations
#'
#' Find simulations that did not crash, that successfully completed and that did
#' not go extinct
#'
#' @param roots Vector of simulation folders
#'
#' @return A character vector
#'
#' @examples
#'
#' \dontrun{
#'
#' roots <- fetch_dirs("data", "example", 1)
#' find_extant(roots)
#'
#' }
#'
#' @export
find_extant <- function(roots) {
extant <- purrr::map_lgl(roots, is_extant)
return(roots[extant])
}
roots <- fetch_dirs("data", "example", 1)
find_extant(roots)
#' Read a parameter file
#'
#' @param filename Path to the parameter file
#' @param parnames Optional vector of parameter names
#'
#' @return A list of parameter values
#'
#' @examples
#'
#' \dontrun{
#'
#' # Location of the simulation folder
#' root <- "data/example_1"
#'
#' f <- file.path(root, "parameters.txt")
#' read_param_file(f)
#'
#' }
#'
#' @export
read_param_file <- function(filename, parnames = NULL) {
# Give it the path to the parameter file
# And optionally the parameters you want it to read
paramlist <- readLines(filename)
# Extract values of the parameters
parameters <- lapply(paramlist, function(p) {
p <- strsplit(as.character(p), " ")[[1]]
# Get parameter only if required
if (!is.null(parnames) & !p[1] %in% parnames) return (NULL)
return (list(p[1], p[-1]))
})
parameters <- parameters[sapply(parameters, function(x) !is.null(x))]
names(parameters) <- sapply(parameters, "[[", 1)
parameters <- lapply(parameters, "[[", 2)
return (parameters)
}
root <- "data/example_1"
f <- file.path(root, "parameters.txt")
read_param_file(f)
#' Read an architecture file
#'
#' @param filename Path to the architecture file
#'
#' @return A list with all the fields of a genetic architecture
#'
#' @examples
#'
#' \dontrun{
#'
#' # Location of the simulation folder
#' root <- "data/example_1"
#'
#' f <- file.path(root, "architecture.txt")
#' read_arch_file(f)
#'
#' }
#'
#' @export
read_arch_file <- function(filename) {
archfile <- readLines(filename)
begin <- grep("^Architecture:$", archfile)
if (length(begin) == 0) stop(
paste0(
"Cannot find the beginning of the genetic architecture in file ",
filename
)
)
begin <- begin + 1
archfile <- archfile[begin:length(archfile)]
fields <- c("chromosomes", "traits", "locations", "effects", "dominances")
arch <- lapply(fields, function(x) {
str2vec(archfile[which(archfile == x)[1] + 1])
})
names(arch) <- fields
ii <- grep("network", archfile)
networks <- lapply(ii, function(i) list (
edges0 = egssimtools:::str2vec(archfile[i + 2]),
edges1 = egssimtools:::str2vec(archfile[i + 4]),
weights = egssimtools:::str2vec(archfile[i + 6])
))
names(networks) <- c("ecotrait", "matepref", "neutral")
arch$networks <- networks
return(arch)
}
root <- "data/example_1"
f <- file.path(root, "architecture.txt")
read_arch_file(f)
roxygen2::roxygenize()
library(egssimtools)
?read_binary
library(egssimtools)
?read_binary
roxygen2::roxygenize()
library(egssimtools)
roxygen2::roxygenize()
roxygen2::roxygenize()
library(egssimtools)
roxygen2::roxygenize()
library(egssimtools)
library(egssimtools)
?plot_genome_heatmap
library(egssimtools)
library(tidyverse)
library(patchwork)
library(tidygraph)
library(ggraph)
root <- "../data/example_1"
data <- read_sim(root, "EI")
data
ggplot(data, aes(x = time, y = EI)) +
geom_line()
data <- read_sim(root, c("EI", "RI", "SI"))
data
?plot_trait_values
?plot_genome_scan
?plot_genome_heatmap
?plot_genome_scan
?plot_genome_network
library(egssimtools)
roxygen2::roxygenize()
library(egssimtools)
roxygen2::roxygenize()
library(egssimtools)
library(egssimtools)
library(ggplot2)
?geom_bin2d
roxygen2::roxygenise()
library(egssimtools)
roxygen2::roxygenize()
library(egssimtools)
roxygen2::roxygenize()
library(egssimtools)
