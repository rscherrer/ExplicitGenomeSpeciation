smr,
facet_rows = "ecosel",
facet_cols = "hsymmetry",
label_facets = TRUE,
facet_prefixes = c("s", "h")
) +
geom_line() +
xlab("Time (generations)") +
ylab("Ecological isolation") +
scale_alpha_manual(values = runif(2000, min = 0.49, max = 0.51)) + # hack
guides(alpha = FALSE, color = FALSE) +
scale_color_gradient(low = "black", high = "lightgreen")
# Plot the trajectories
ggplot(smr, aes(x = time, y = EI, alpha = simulation, color = color)) %>%
facettize(
smr,
facet_rows = "ecosel",
facet_cols = "hsymmetry",
label_facets = TRUE,
facet_prefixes = c("s", "h")
) +
geom_line() +
xlab("Time (\U02715 1000 generations)") +
ylab("Ecological isolation") +
scale_alpha_manual(values = runif(2000, min = 0.49, max = 0.51)) + # hack
guides(alpha = FALSE, color = FALSE) +
scale_color_gradient(low = "black", high = "lightgreen")
# Plot the trajectories
ggplot(smr, aes(x = time, y = EI, alpha = simulation, color = color)) %>%
facettize(
smr,
facet_rows = "ecosel",
facet_cols = "hsymmetry",
label_facets = TRUE,
facet_prefixes = c("s", "h")
) +
geom_line() +
xlab("Time (\U02715 \U000D7 1000 generations)") +
ylab("Ecological isolation") +
scale_alpha_manual(values = runif(2000, min = 0.49, max = 0.51)) + # hack
guides(alpha = FALSE, color = FALSE) +
scale_color_gradient(low = "black", high = "lightgreen")
# Plot the trajectories
ggplot(smr, aes(x = time, y = EI, alpha = simulation, color = color)) %>%
facettize(
smr,
facet_rows = "ecosel",
facet_cols = "hsymmetry",
label_facets = TRUE,
facet_prefixes = c("s", "h")
) +
geom_line() +
xlab("Time (\U027151000 generations)") +
ylab("Ecological isolation") +
scale_alpha_manual(values = runif(2000, min = 0.49, max = 0.51)) + # hack
guides(alpha = FALSE, color = FALSE) +
scale_color_gradient(low = "black", high = "lightgreen")
# Plot the trajectories
ggplot(smr, aes(x = time, y = EI, alpha = simulation, color = color)) %>%
facettize(
smr,
facet_rows = "ecosel",
facet_cols = "hsymmetry",
label_facets = TRUE,
facet_prefixes = c("s", "h")
) +
geom_line() +
xlab("Time (\U02715 1000 generations)") +
ylab("Ecological isolation") +
scale_alpha_manual(values = runif(2000, min = 0.49, max = 0.51)) + # hack
guides(alpha = FALSE, color = FALSE) +
scale_color_gradient(low = "black", high = "lightgreen")
# Plot the trajectories
ggplot(smr, aes(x = time, y = EI, alpha = simulation, color = color)) %>%
facettize(
smr,
facet_rows = "ecosel",
facet_cols = "hsymmetry",
label_facets = TRUE,
facet_prefixes = c("s", "h")
) +
geom_line() +
xlab("Time (\U02715 1000 generations)") +
ylab("Ecological isolation") +
scale_x_continuous(n.breaks = 3)
# Plot the trajectories
ggplot(smr, aes(x = time, y = EI, alpha = simulation, color = color)) %>%
facettize(
smr,
facet_rows = "ecosel",
facet_cols = "hsymmetry",
label_facets = TRUE,
facet_prefixes = c("s", "h")
) +
geom_line() +
xlab("Time (\U02715 1000 generations)") +
ylab("Ecological isolation") +
scale_x_continuous(n.breaks = 3) +
scale_alpha_manual(values = runif(2000, min = 0.49, max = 0.51)) + # hack
guides(alpha = FALSE, color = FALSE) +
scale_color_gradient(low = "black", high = "lightgreen")
# Plot the trajectories
ggplot(smr, aes(x = time, y = EI, alpha = simulation, color = color)) %>%
facettize(
smr,
facet_rows = "ecosel",
facet_cols = "hsymmetry",
label_facets = TRUE,
facet_prefixes = c("s", "h")
) +
geom_line() +
xlab("Time (\U02715 1000 generations)") +
ylab("Ecological isolation") +
scale_x_continuous(n.breaks = 4) +
scale_y_continuous(n.breaks = 3) +
scale_alpha_manual(values = runif(2000, min = 0.49, max = 0.51)) + # hack
guides(alpha = FALSE, color = FALSE) +
scale_color_gradient(low = "black", high = "lightgreen")
# Plot the trajectories
ggplot(smr, aes(x = time, y = EI, alpha = simulation, color = color)) %>%
facettize(
smr,
facet_rows = "ecosel",
facet_cols = "hsymmetry",
label_facets = TRUE,
facet_prefixes = c("s", "h")
) +
geom_line() +
xlab("Time (\U02715 1000 generations)") +
ylab("Ecological isolation") +
scale_x_continuous(n.breaks = 4) +
scale_y_continuous(n.breaks = 4) +
scale_alpha_manual(values = runif(2000, min = 0.49, max = 0.51)) + # hack
guides(alpha = FALSE, color = FALSE) +
scale_color_gradient(low = "black", high = "lightgreen")
variables <- c("EI", "RI", "SI")
colors <- c("lightgreen", "lightblue", "coral")
ylabs <- c("Ecological divergence", "Reproductive isolation", "Spatial isolation")
p <- mapply(function(variable, color, ylab) {
# Summarize the data
smr <- data %>%
mutate(time = time / 1000) %>%
filter(scaleI == sigmaI_value, mutation == mu_value) %>%
mutate(ecosel = fct_rev(factor(ecosel)), hsymmetry = factor(hsymmetry)) %>%
group_by(hsymmetry, ecosel, dispersal, mutation, scaleA, scaleI, simulation) %>%
mutate(color = last(get(variable)))
# Plot the trajectories
ggplot(smr, aes(x = time, y = EI, alpha = simulation, color = color)) %>%
facettize(
smr,
facet_rows = "ecosel",
facet_cols = "hsymmetry",
label_facets = TRUE,
facet_prefixes = c("s", "h")
) +
geom_line() +
xlab("Time (\U02715 1000 generations)") +
ylab(ylab) +
scale_x_continuous(n.breaks = 4) +
scale_y_continuous(n.breaks = 4) +
scale_alpha_manual(values = runif(2000, min = 0.49, max = 0.51)) + # hack
guides(alpha = FALSE, color = FALSE) +
scale_color_gradient(low = "black", high = color)
}, variables, colors, ylabs)
p[[1]]
p <- mapply(function(variable, col, ylab) {
# Summarize the data
smr <- data %>%
mutate(time = time / 1000) %>%
filter(scaleI == sigmaI_value, mutation == mu_value) %>%
mutate(ecosel = fct_rev(factor(ecosel)), hsymmetry = factor(hsymmetry)) %>%
group_by(hsymmetry, ecosel, dispersal, mutation, scaleA, scaleI, simulation) %>%
mutate(color = last(get(variable)))
# Plot the trajectories
ggplot(smr, aes(x = time, y = EI, alpha = simulation, color = color)) %>%
facettize(
smr,
facet_rows = "ecosel",
facet_cols = "hsymmetry",
label_facets = TRUE,
facet_prefixes = c("s", "h")
) +
geom_line() +
xlab("Time (\U02715 1000 generations)") +
ylab(ylab) +
scale_x_continuous(n.breaks = 4) +
scale_y_continuous(n.breaks = 4) +
scale_alpha_manual(values = runif(2000, min = 0.49, max = 0.51)) + # hack
guides(alpha = FALSE, color = FALSE) +
scale_color_gradient(low = "black", high = col)
}, variables, colors, ylabs)
p[[1]]
p <- mapply(function(variable, col, ylab) {
# Summarize the data
smr <- data %>%
mutate(time = time / 1000) %>%
filter(scaleI == sigmaI_value, mutation == mu_value) %>%
mutate(ecosel = fct_rev(factor(ecosel)), hsymmetry = factor(hsymmetry)) %>%
group_by(hsymmetry, ecosel, dispersal, mutation, scaleA, scaleI, simulation) %>%
mutate(color = last(get(variable)))
# Plot the trajectories
p <- ggplot(smr, aes(x = time, y = EI, alpha = simulation, color = color)) %>%
facettize(
smr,
facet_rows = "ecosel",
facet_cols = "hsymmetry",
label_facets = TRUE,
facet_prefixes = c("s", "h")
) +
geom_line() +
xlab("Time (\U02715 1000 generations)") +
ylab(ylab) +
scale_x_continuous(n.breaks = 4) +
scale_y_continuous(n.breaks = 4) +
scale_alpha_manual(values = runif(2000, min = 0.49, max = 0.51)) + # hack
guides(alpha = FALSE, color = FALSE) +
scale_color_gradient(low = "black", high = col)
return (p)
}, variables, colors, ylabs)
p[[1]]
p[[2]]
p <- mapply(function(variable, col, ylab) {
# Summarize the data
smr <- data %>%
mutate(time = time / 1000) %>%
filter(scaleI == sigmaI_value, mutation == mu_value) %>%
mutate(ecosel = fct_rev(factor(ecosel)), hsymmetry = factor(hsymmetry)) %>%
group_by(hsymmetry, ecosel, dispersal, mutation, scaleA, scaleI, simulation) %>%
mutate(color = last(get(variable)))
# Plot the trajectories
p <- ggplot(smr, aes(x = time, y = EI, alpha = simulation, color = color)) %>%
facettize(
smr,
facet_rows = "ecosel",
facet_cols = "hsymmetry",
label_facets = TRUE,
facet_prefixes = c("s", "h")
) +
geom_line() +
xlab("Time (\U02715 1000 generations)") +
ylab(ylab) +
scale_x_continuous(n.breaks = 4) +
scale_y_continuous(n.breaks = 4) +
scale_alpha_manual(values = runif(2000, min = 0.49, max = 0.51)) + # hack
guides(alpha = FALSE, color = FALSE) +
scale_color_gradient(low = "black", high = col)
return (p)
}, variables, colors, ylabs, SIMPLIFY = FALSE)
p[[1]]
p[[2]]
p <- mapply(function(variable, col, ylab) {
# Summarize the data
smr <- data %>%
mutate(time = time / 1000) %>%
filter(scaleI == sigmaI_value, mutation == mu_value) %>%
mutate(ecosel = fct_rev(factor(ecosel)), hsymmetry = factor(hsymmetry)) %>%
group_by(hsymmetry, ecosel, dispersal, mutation, scaleA, scaleI, simulation) %>%
mutate(color = last(get(variable)))
# Plot the trajectories
p <- ggplot(smr, aes(x = time, y = get(variable), alpha = simulation, color = color)) %>%
facettize(
smr,
facet_rows = "ecosel",
facet_cols = "hsymmetry",
label_facets = TRUE,
facet_prefixes = c("s", "h")
) +
geom_line() +
xlab("Time (\U02715 1000 generations)") +
ylab(ylab) +
scale_x_continuous(n.breaks = 4) +
scale_y_continuous(n.breaks = 4) +
scale_alpha_manual(values = runif(2000, min = 0.49, max = 0.51)) + # hack
guides(alpha = FALSE, color = FALSE) +
scale_color_gradient(low = "black", high = col)
return (p)
}, variables, colors, ylabs, SIMPLIFY = FALSE)
p[[1]]
p[[2]]
p[[3]]
plot_grid(plotlist = p, ncol = 3, labels = c("A", "B", "C"))
ggsave(sprintf("figures/trajectories_mutation_%s_scaleI_%s.png", mutation_value, gsub(" ", "_", scaleI_value)))
mutation_value <- 0.001
scaleI_value <- "1 0 0"
p <- mapply(function(variable, col, ylab) {
# Summarize the data
smr <- data %>%
mutate(time = time / 1000) %>%
filter(scaleI == sigmaI_value, mutation == mu_value) %>%
mutate(ecosel = fct_rev(factor(ecosel)), hsymmetry = factor(hsymmetry)) %>%
group_by(hsymmetry, ecosel, dispersal, mutation, scaleA, scaleI, simulation) %>%
mutate(color = last(get(variable)))
# Plot the trajectories
p <- ggplot(smr, aes(x = time, y = get(variable), alpha = simulation, color = color)) %>%
facettize(
smr,
facet_rows = "ecosel",
facet_cols = "hsymmetry",
label_facets = TRUE,
facet_prefixes = c("s", "h")
) +
geom_line() +
xlab("Time (\U02715 1000 generations)") +
ylab(ylab) +
scale_x_continuous(n.breaks = 4) +
scale_y_continuous(n.breaks = 4) +
scale_alpha_manual(values = runif(2000, min = 0.49, max = 0.51)) + # hack
guides(alpha = FALSE, color = FALSE) +
scale_color_gradient(low = "black", high = col)
return (p)
}, variables, colors, ylabs, SIMPLIFY = FALSE)
fig <- plot_grid(plotlist = p, ncol = 3, labels = c("A", "B", "C"))
ggsave(sprintf("figures/trajectories_mutation_%s_scaleI_%s.png", mutation_value, gsub(" ", "_", scaleI_value)))
ggsave(sprintf("figures/trajectories_mutation_%s_scaleI_%s.png", mutation_value, gsub(" ", "_", scaleI_value)), width = 7, height = 5, dpi = 300)
ggsave(sprintf("figures/trajectories_mutation_%s_scaleI_%s.png", mutation_value, gsub(" ", "_", scaleI_value)), width = 8, height = 5, dpi = 300)
ggsave(sprintf("figures/trajectories_mutation_%s_scaleI_%s.png", mutation_value, gsub(" ", "_", scaleI_value)), width = 10, height = 6, dpi = 300)
ggsave(sprintf("figures/trajectories_mutation_%s_scaleI_%s.png", mutation_value, gsub(" ", "_", scaleI_value)), width = 12, height = 6, dpi = 300)
rm(list = ls())
library(egssimtools)
library(tidyverse)
library(cowplot)
# Settings
variables <- c("EI", "RI", "SI")
colors <- c("lightgreen", "lightblue", "coral")
# Read the data
data <- readRDS("data/population_wide_data.rds")
# Parameter values
mutations <- unique(data$mutation)
scaleIs <- levels(data$scaleI)
# Variables to plot
variables <- c("EI", "RI", "SI")
colors <- c("lightgreen", "lightblue", "coral")
ylabs <- c("Ecological divergence", "Reproductive isolation", "Spatial isolation")
# For each combination of parameters...
lapply(mutations, function(mutation_value) {
lapply(scaleIs, function(scaleI_value) {
p <- mapply(function(variable, col, ylab) {
# Summarize the data
smr <- data %>%
mutate(time = time / 1000) %>%
filter(scaleI == sigmaI_value, mutation == mu_value) %>%
mutate(ecosel = fct_rev(factor(ecosel)), hsymmetry = factor(hsymmetry)) %>%
group_by(hsymmetry, ecosel, dispersal, mutation, scaleA, scaleI, simulation) %>%
mutate(color = last(get(variable)))
# Plot the trajectories
p <- ggplot(smr, aes(x = time, y = get(variable), alpha = simulation, color = color)) %>%
facettize(
smr,
facet_rows = "ecosel",
facet_cols = "hsymmetry",
label_facets = TRUE,
facet_prefixes = c("s", "h")
) +
geom_line() +
xlab("Time (\U02715 1000 generations)") +
ylab(ylab) +
scale_x_continuous(n.breaks = 4) +
scale_y_continuous(n.breaks = 4) +
scale_alpha_manual(values = runif(2000, min = 0.49, max = 0.51)) + # hack
guides(alpha = FALSE, color = FALSE) +
scale_color_gradient(low = "black", high = col)
return (p)
}, variables, colors, ylabs, SIMPLIFY = FALSE)
#p[[1]]
#p[[2]]
#p[[3]]
fig <- plot_grid(plotlist = p, ncol = 3, labels = c("A", "B", "C"))
#fig
ggsave(sprintf("figures/trajectories_mutation_%s_scaleI_%s.png", mutation_value, gsub(" ", "_", scaleI_value)), width = 12, height = 6, dpi = 300)
})
})
rm(list = ls())
library(egssimtools)
library(tidyverse)
library(cowplot)
# Settings
variables <- c("EI", "RI", "SI")
colors <- c("lightgreen", "lightblue", "coral")
# Read the data
data <- readRDS("data/population_wide_data.rds")
# Parameter values
mutations <- unique(data$mutation)
scaleIs <- levels(data$scaleI)
# Variables to plot
variables <- c("EI", "RI", "SI")
colors <- c("lightgreen", "lightblue", "coral")
ylabs <- c("Ecological divergence", "Reproductive isolation", "Spatial isolation")
# For each combination of parameters...
lapply(mutations, function(mutation_value) {
lapply(scaleIs, function(scaleI_value) {
p <- mapply(function(variable, col, ylab) {
# Summarize the data
smr <- data %>%
mutate(time = time / 1000) %>%
filter(scaleI == scaleI_value, mutation == mutation_value) %>%
mutate(ecosel = fct_rev(factor(ecosel)), hsymmetry = factor(hsymmetry)) %>%
group_by(hsymmetry, ecosel, dispersal, mutation, scaleA, scaleI, simulation) %>%
mutate(color = last(get(variable)))
# Plot the trajectories
p <- ggplot(smr, aes(x = time, y = get(variable), alpha = simulation, color = color)) %>%
facettize(
smr,
facet_rows = "ecosel",
facet_cols = "hsymmetry",
label_facets = TRUE,
facet_prefixes = c("s", "h")
) +
geom_line() +
xlab("Time (\U02715 1000 generations)") +
ylab(ylab) +
scale_x_continuous(n.breaks = 4) +
scale_y_continuous(n.breaks = 4) +
scale_alpha_manual(values = runif(2000, min = 0.49, max = 0.51)) + # hack
guides(alpha = FALSE, color = FALSE) +
scale_color_gradient(low = "black", high = col)
return (p)
}, variables, colors, ylabs, SIMPLIFY = FALSE)
#p[[1]]
#p[[2]]
#p[[3]]
fig <- plot_grid(plotlist = p, ncol = 3, labels = c("A", "B", "C"))
#fig
ggsave(sprintf("figures/trajectories_mutation_%s_scaleI_%s.png", mutation_value, gsub(" ", "_", scaleI_value)), width = 12, height = 6, dpi = 300)
})
})
rm(list = ls())
library(egssimtools)
library(tidyverse)
library(cowplot)
root <- "/media/raphael/bigass/simulations/EGS/EGS_sim1"
root <- "/media/raphael/bigass/simulations/EGS/EGS_sim1"
simulations <- find_extant(root)
pars <- collect_parameters(simulations, c("ecosel", "hsymmetry"))
head(pars)
pars$simulation <- simulations
pars <- collect_parameters(simulations, c("ecosel", "hsymmetry"), to_numeric = c("ecosel", "hsymmetry"))
simulations[pars$ecosel == 1.5 & pars$hsymmetry == 0]
pars$ecosel
simulations[pars$ecosel == 1.6 & pars$hsymmetry == 0]
data <- collect_simulations(simulations, c("EI", "RI"))
head(data)
data %>% group_by(simulation) %>% summarize(mean)
data %>% group_by(simulation) %>% summarize(mean())
data %>% group_by(simulation) %>% summarize(EI = last(EI), RI = last(RI))
data <- data %>% group_by(simulation) %>% summarize(EI = last(EI), RI = last(RI))
head(data)
max(data$)
max(data$RI)
simulations[1]
plot_trait_density(simulations[1])
plot_trait_density(simulations[1])
plot_trait_density(simulations[1], "EI")
simulations[1]
?system
# Can I launch a simulation from R? but the seed on my machine won't be the same as the one on the cluster...
system("pwd")
# Can I launch a simulation from R? but the seed on my machine won't be the same as the one on the cluster...
system("cd ../build/release")
# Can I launch a simulation from R? but the seed on my machine won't be the same as the one on the cluster...
system("../build/release/EGS")
# Can I launch a simulation from R? but the seed on my machine won't be the same as the one on the cluster...
system("pwd")
# Can I launch a simulation from R? but the seed on my machine won't be the same as the one on the cluster...
system("../cluster/EGS ../cluster/test/parameters.txt")
# Can I launch a simulation from R? but the seed on my machine won't be the same as the one on the cluster...
system("../cluster/EGS ../cluster/test/parameters.txt")
run_simulation <- function(pgrm, paramfile = NULL, to = ".", script = "job.sh", script_rm = TRUE) {
# Create shell script
# Prepare lines to write
lines <- c("#!/usr/bin/bash", paste("cd", to), paste(prgrm, paramfile))
# Write the job script
jobfile <- file(script)
writeLines(lines, jobfile)
close(jobfile)
# Run the script
system(script)
# Remove the script?
if (script_rm) file.remove(script)
}
run_simulation("../EGS", "../test/parameters.txt", "../cluster/test")
run_simulation <- function(pgrm, paramfile = NULL, to = ".", script = "job.sh", script_rm = TRUE) {
# Create shell script
# Prepare lines to write
lines <- c("#!/usr/bin/bash", paste("cd", to), paste(pgrm, paramfile))
# Write the job script
jobfile <- file(script)
writeLines(lines, jobfile)
close(jobfile)
# Run the script
system(script)
# Remove the script?
if (script_rm) file.remove(script)
}
run_simulation("../EGS", "../test/parameters.txt", "../cluster/test")
run_simulation <- function(pgrm, paramfile = NULL, to = ".", script = "job.sh", script_rm = TRUE) {
# Create shell script
# Prepare lines to write
lines <- c("#!/usr/bin/bash", paste("cd", to), paste(pgrm, paramfile))
# Write the job script
jobfile <- file(script)
writeLines(lines, jobfile)
close(jobfile)
# Change access rights
system(paste("chmod u+x", script))
# Run the script
system(paste0("./", script))
# Remove the script?
if (script_rm) file.remove(script)
}
run_simulation("../EGS", "../test/parameters.txt", "../cluster/test")
list.files()
run_simulation("../EGS", "../test/parameters.txt", "../cluster/test", script_rm = FALSE)
