data <- read_data(
root, c("time", "genome_Fst"), by = c(1, 1), dupl = c(300, 1),
architecture = TRUE, archfile = archfile
)
data <- data %>% mutate(locus = factor(locus))
nloci <- length(unique(data$locus))
data <- smoothen_data(data, x = "time", y = "genome_Fst", line = "locus")
data
# Plot locus Fst through time for each trait
p <- gglineplot(
data, x = "time", y = "genome_Fst", line = "locus",
mapping = aes(color = trait)
)
p <- facettize(p, rows = "trait", prepend = "trait ")
p
data <- smoothen_data(data, x = "time", y = "genome_Fst", line = "locus", span = 0.6)
#' Smoothen lines using LOESS
#'
#' @param data A data frame
#' @param x Name of the horizontal axis variable
#' @param y Name of the vertical axis variable
#' @param span Span parameter for the smoothing
#' @param line Name of the variable identifying the different lines. Leave
#' unspecified if there is only one line to smoothen.
#'
#' @return A data frame
#'
#' @examples
#'
#' root <- system.file("extdata", "example_1", package = "egssimtools")
#' data <- read_loci(root, "genome_Fst", architecture = TRUE)
#' smoothen_data(data, "time", "genome_Fst", line = "locus")
#'
#' @export
smoothen_data <- function(data, x, y, span = 0.2, line = NULL) {
if (is.null(line)) {
data <- data %>% dplyr::mutate(linecol = 1)
line <- "linecol"
}
data <- data %>%
dplyr::group_by_at(line) %>%
tidyr::nest() %>%
dplyr::mutate(smooth = purrr::map(
data,
~ loess(
as.formula(paste(y, "~", x)), degree = 1, span = span, data = .x
)$fitted
)) %>%
tidyr::unnest(cols = c(data, smooth)) %>%
dplyr::ungroup() %>%
dplyr::select(-smooth)
if ("linecol" %in% colnames(data)) data <- data %>% dplyr::select(-linecol)
return(data)
}
data <- smoothen_data(data, x = "time", y = "genome_Fst", line = "locus", span = 0.6)
data <- read_data(
root, c("time", "genome_Fst"), by = c(1, 1), dupl = c(300, 1),
architecture = TRUE, archfile = archfile
)
data <- data %>% mutate(locus = factor(locus))
nloci <- length(unique(data$locus))
data <- smoothen_data(data, x = "time", y = "genome_Fst", line = "locus", span = 0.6)
data
line
data %>%
dplyr::group_by_at(line)
data %>%
dplyr::group_by_at(line) %>%
tidyr::nest()
data %>%
dplyr::group_by_at(line) %>%
tidyr::nest() %>%
dplyr::mutate(smooth = purrr::map(
data,
~ loess(
as.formula(paste(y, "~", x)), degree = 1, span = span, data = .x
)$fitted
))
data %>%
dplyr::group_by_at(line) %>%
tidyr::nest() %>%
dplyr::mutate(smooth = purrr::map(
data,
~ loess(
as.formula(paste(y, "~ time")), degree = 1, span = span, data = .x
)$fitted
)) %>%
tidyr::unnest(cols = c(data, smooth)) %>%
dplyr::ungroup() %>%
dplyr::select(-smooth)
data %>%
dplyr::group_by_at(line) %>%
tidyr::nest() %>%
dplyr::mutate(smooth = purrr::map(
data,
~ loess(
as.formula(paste(y, "~ time")), degree = 1, span = 0.5, data = .x
)$fitted
)) %>%
tidyr::unnest(cols = c(data, smooth)) %>%
dplyr::ungroup() %>%
dplyr::select(-smooth)
data <- read_data(
root, c("time", "genome_Fst"), by = c(1, 1), dupl = c(300, 1),
architecture = TRUE, archfile = archfile
)
data <- data %>% mutate(locus = factor(locus))
nloci <- length(unique(data$locus))
data
head(data)000
head(data)
data <- read_data(
root, c("time", "genome_Fst"), by = c(1, 1), dupl = c(300, 1),
architecture = TRUE, archfile = archfile
)
data <- data %>% mutate(locus = factor(locus))
nloci <- length(unique(data$locus))
head(data)
tibble(data)
data %>%
dplyr::group_by_at(line) %>%
tidyr::nest() %>%
dplyr::mutate(smooth = purrr::map(
data,
~ loess(
as.formula(paste(y, "~ time")), degree = 1, span = span, data = .x
)$fitted
)) %>%
tidyr::unnest(cols = c(data, smooth)) %>%
dplyr::ungroup() %>%
dplyr::select(-smooth)
data <- data %>% filter(locus == 1)
data
ggplot(data, aes(x = time, y = genome_Fst)) + geom_line()
data %>%
dplyr::group_by_at(line) %>%
tidyr::nest() %>%
dplyr::mutate(smooth = purrr::map(
data,
~ loess(
as.formula(paste(y, "~ time")), degree = 1, span = span, data = .x
)$fitted
)) %>%
tidyr::unnest(cols = c(data, smooth)) %>%
dplyr::ungroup()
data %>%
dplyr::group_by_at(line) %>%
tidyr::nest() %>%
dplyr::mutate(smooth = purrr::map(
data,
~ loess(
as.formula(paste(y, "~ time")), degree = 1, span = span, data = .x
)$fitted
)) %>%
tidyr::unnest(cols = c(data, smooth)) %>%
dplyr::ungroup() %>%
mutate_at(y, ~ smooth)
data %>%
dplyr::group_by_at(line) %>%
tidyr::nest() %>%
dplyr::mutate(smooth = purrr::map(
data,
~ loess(
as.formula(paste(y, "~ time")), degree = 1, span = span, data = .x
)$fitted
)) %>%
tidyr::unnest(cols = c(data, smooth)) %>%
dplyr::ungroup() %>%
dplyr::mutate_at(y, ~ smooth) %>%
dplyr::select(-smooth)
data <- data %>%
dplyr::group_by_at(line) %>%
tidyr::nest() %>%
dplyr::mutate(smooth = purrr::map(
data,
~ loess(
as.formula(paste(y, "~ time")), degree = 1, span = span, data = .x
)$fitted
)) %>%
tidyr::unnest(cols = c(data, smooth)) %>%
dplyr::ungroup() %>%
dplyr::mutate_at(y, ~ smooth) %>%
dplyr::select(-smooth)
ggplot(data, aes(x = time, y = genome_Fst)) + geom_line()
#' Smoothen lines using LOESS
#'
#' @param data A data frame
#' @param x Name of the horizontal axis variable
#' @param y Name of the vertical axis variable
#' @param span Span parameter for the smoothing
#' @param line Name of the variable identifying the different lines. Leave
#' unspecified if there is only one line to smoothen.
#'
#' @return A data frame
#'
#' @examples
#'
#' root <- system.file("extdata", "example_1", package = "egssimtools")
#' data <- read_loci(root, "genome_Fst", architecture = TRUE)
#' smoothen_data(data, "time", "genome_Fst", line = "locus")
#'
#' @export
smoothen_data <- function(data, x, y, span = 0.2, line = NULL) {
if (is.null(line)) {
data <- data %>% dplyr::mutate(linecol = 1)
line <- "linecol"
}
data <- data %>%
dplyr::group_by_at(line) %>%
tidyr::nest() %>%
dplyr::mutate(smooth = purrr::map(
data,
~ loess(
as.formula(paste(y, "~ time")), degree = 1, span = span, data = .x
)$fitted
)) %>%
tidyr::unnest(cols = c(data, smooth)) %>%
dplyr::ungroup() %>%
dplyr::mutate_at(y, ~ smooth) %>%
dplyr::select(-smooth)
if ("linecol" %in% colnames(data)) data <- data %>% dplyr::select(-linecol)
return(data)
}
data <- read_data(
root, c("time", "genome_Fst"), by = c(1, 1), dupl = c(300, 1),
architecture = TRUE, archfile = archfile
)
data <- data %>% mutate(locus = factor(locus))
nloci <- length(unique(data$locus))
data <- smoothen_data(data, x = "time", y = "genome_Fst", line = "locus", span = 0.6)
# Plot locus Fst through time for each trait
p <- gglineplot(
data, x = "time", y = "genome_Fst", line = "locus",
mapping = aes(color = trait)
)
p <- facettize(p, rows = "trait", prepend = "trait ")
p
data <- read_data(
root, c("time", "genome_Fst"), by = c(1, 1), dupl = c(300, 1),
architecture = TRUE, archfile = archfile
)
data <- data %>% mutate(locus = factor(locus))
nloci <- length(unique(data$locus))
data <- smoothen_data(data, x = "time", y = "genome_Fst", line = "locus", span = 0.1)
# Plot locus Fst through time for each trait
p <- gglineplot(
data, x = "time", y = "genome_Fst", line = "locus",
mapping = aes(color = trait)
)
p <- facettize(p, rows = "trait", prepend = "trait ")
p
data <- read_data(
root, c("time", "genome_Fst"), by = c(1, 1), dupl = c(300, 1),
architecture = TRUE, archfile = archfile
)
data <- data %>% mutate(locus = factor(locus))
nloci <- length(unique(data$locus))
data <- smoothen_data(data, x = "time", y = "genome_Fst", line = "locus", span = 0)
data <- smoothen_data(data, x = "time", y = "genome_Fst", line = "locus", span = 0.2)
# Plot locus Fst through time for each trait
p <- gglineplot(
data, x = "time", y = "genome_Fst", line = "locus",
mapping = aes(color = trait)
)
p <- facettize(p, rows = "trait", prepend = "trait ")
p
roxygen2::roxygnize()
roxygen2::roxygenize()
library(egssimtools)
.
data <- read_loci(root, "genome_Fst", architecture = TRUE, archfile = archfile)
read_genome <- function(
folder,
variables,
parnames = NULL,
combine = FALSE,
as_numeric = NULL,
architecture = FALSE,
archfile = "architecture.txt",
parfile = "paramlog.txt",
nloci = NULL
) {
if (is.null(nloci)) nloci <- guess_nloci(folder, variables[1])
read_data(
folder,
c("time", variables),
by = rep(1, length(variables) + 1),
dupl = c(nloci, rep(1, length(variables))),
parnames = parnames,
combine = combine,
as_numeric = as_numeric,
architecture = architecture,
archfile = archfile,
parfile = parfile
)
}
read_genome(root, c("genome_Fst", "genome_Cst"), architecture = TRUE)
#' Read locus-specific data through time
#'
#' Wrapper around `read_data` to read locus-wise data
#'
#' @param folder Path to the folder
#' @param variables What variables to read (`time` is included by default)
#' @param parnames,combine,as_numeric,architecture,archfile,parfile Parameters for `read_data`
#' @param nloci Number of loci (automatically guessed if unspecified)
#'
#' @details The file `time.dat` must be present
#'
#' @return A data frame
#'
#' @examples
#'
#' root <- system.file("extdata", "example_1", package = "egssimtools")
#'
#' # Read Fst throughout the genome
#' read_genome(root, "genome_Fst")
#'
#' # Read multiple metrics and attach architecture
#' read_genome(root, c("genome_Fst", "genome_Cst"), architecture = TRUE)
#'
#' @export
read_genome <- function(
folder,
variables,
parnames = NULL,
combine = FALSE,
as_numeric = NULL,
architecture = FALSE,
archfile = "architecture.txt",
parfile = "paramlog.txt",
nloci = NULL
) {
if (is.null(nloci)) nloci <- guess_nloci(folder, variables[1])
read_data(
folder,
c("time", variables),
by = rep(1, length(variables) + 1),
dupl = c(nloci, rep(1, length(variables))),
parnames = parnames,
combine = combine,
as_numeric = as_numeric,
architecture = architecture,
archfile = archfile,
parfile = parfile
)
}
root <- system.file("extdata", "example_1", package = "egssimtools")
# Read Fst throughout the genome
read_genome(root, "genome_Fst")
#' Read locus-specific data through time
#'
#' Wrapper around `read_data` to read locus-wise data
#'
#' @param folder Path to the folder
#' @param variables What variables to read (`time` is included by default)
#' @param parnames,combine,as_numeric,architecture,archfile,parfile Parameters for `read_data`
#' @param nloci Number of loci (automatically guessed if unspecified)
#'
#' @details The file `time.dat` must be present
#'
#' @return A data frame
#'
#' @examples
#'
#' root <- system.file("extdata", "example_1", package = "egssimtools")
#'
#' # Read Fst throughout the genome
#' read_genome(root, "genome_Fst")
#'
#' # Read multiple metrics and attach architecture
#' read_genome(root, c("genome_Fst", "genome_Cst"), architecture = TRUE)
#'
#' @export
read_genome <- function(
folder,
variables,
parnames = NULL,
combine = FALSE,
as_numeric = NULL,
architecture = FALSE,
archfile = "architecture.txt",
parfile = "paramlog.txt",
nloci = NULL
) {
if (is.null(nloci)) nloci <- guess_nloci(folder, variables[1])
data <- read_data(
folder,
c("time", variables),
by = rep(1, length(variables) + 1),
dupl = c(nloci, rep(1, length(variables))),
parnames = parnames,
combine = combine,
as_numeric = as_numeric,
architecture = architecture,
archfile = archfile,
parfile = parfile
)
if ("locus" %in% colnames(data)) {
data$locus <- rep(seq(nloci), nrow(data) / nloci)
}
return(data)
}
#' Read locus-specific data through time
#'
#' Wrapper around `read_data` to read locus-wise data
#'
#' @param folder Path to the folder
#' @param variables What variables to read (`time` is included by default)
#' @param parnames,combine,as_numeric,architecture,archfile,parfile Parameters for `read_data`
#' @param nloci Number of loci (automatically guessed if unspecified)
#'
#' @details The file `time.dat` must be present
#'
#' @return A data frame
#'
#' @examples
#'
#' root <- system.file("extdata", "example_1", package = "egssimtools")
#'
#' # Read Fst throughout the genome
#' read_genome(root, "genome_Fst")
#'
#' # Read multiple metrics and attach architecture
#' read_genome(root, c("genome_Fst", "genome_Cst"), architecture = TRUE)
#'
#' @export
read_genome <- function(
folder,
variables,
parnames = NULL,
combine = FALSE,
as_numeric = NULL,
architecture = FALSE,
archfile = "architecture.txt",
parfile = "paramlog.txt",
nloci = NULL
) {
if (is.null(nloci)) nloci <- guess_nloci(folder, variables[1])
data <- read_data(
folder,
c("time", variables),
by = rep(1, length(variables) + 1),
dupl = c(nloci, rep(1, length(variables))),
parnames = parnames,
combine = combine,
as_numeric = as_numeric,
architecture = architecture,
archfile = archfile,
parfile = parfile
)
if (!"locus" %in% colnames(data)) {
data$locus <- rep(seq(nloci), nrow(data) / nloci)
}
return(data)
}
read_genome(root, "genome_Fst")
read_genome(root, c("genome_Fst", "genome_Cst"), architecture = TRUE)
#' Read individual data through time
#'
#' Wrapper around `read_data` to read individual-wise data
#'
#' @param folder Path to the folder
#' @param variables What variables to read (`time` is included by default)
#' @param by Same as the `by` argument of `read_data` (do not count `time` in)
#' @param parnames,combine,as_numeric,parfile Parameters for `read_data`
#'
#' @details The files `time.dat` and `population_size.dat` must be present
#'
#' @return A data frame
#'
#' @examples
#'
#' root <- system.file("extdata", "example_1", package = "egssimtools")
#'
#' # Read individual trait values through time
#' read_pop(root, "individual_trait", by = 3)
#'
#' # Read trait values, ecotypes and habitats
#' variables <- c("individual_trait", "individual_ecotype", "individual_habitat")
#' read_pop(root, variables, by = c(3, 1, 1))
#'
#' @export
read_pop <- function(
folder,
variables,
by = 3,
parnames = NULL,
combine = FALSE,
as_numeric = NULL,
parfile = "paramlog.txt"
) {
read_data(
folder,
c("time", variables),
by = c(1, by),
dupl = list("population_size", rep(1, length(variables))),
parnames = parnames,
combine = combine,
as_numeric = as_numeric,
parfile = parfile
)
}
root <- system.file("extdata", "example_1", package = "egssimtools")
# Read individual trait values through time
read_pop(root, "individual_trait", by = 3)
variables <- c("individual_trait", "individual_ecotype", "individual_habitat")
read_pop(root, variables, by = c(3, 1, 1))
root <- system.file("extdata", "example_1", package = "egssimtools")
# Read individual trait values through time
read_pop(root, "individual_trait", by = 3)
variables <- c("individual_trait", "individual_ecotype", "individual_habitat")
read_pop(root, variables, by = c(3, 1, 1))
