#' )
#'
#' }
#'
#' @export
collect_data <- function(
root,
check_extant = TRUE,
pattern = "sim_",
level = 0,
type = "data",
id_column = "sim",
...
) {
# Fetch simulation folders
if (level > 0) root <- fetch_dirs(root, pattern = pattern, level = level)
# Find extant simulations if needed
if (check_extant) root <- find_extant(root)
# Read the data and combine
data <- purrr::map_dfr(root, read_this, type, ..., .id = id_column)
return(data)
}
root <- "data"
collect_data(
root, c("time", "EI"), pattern = "example", level = 1,
check_extant = FALSE, parnames = c("ecosel", "hsymmetry")
)
read_this(root, "data", variables = c("time", "EI"))
root <- "data/example_1"
read_this(root, "sim", variables = "EI")
read_this(root, "data", variables = c("time", "EI"))
root <- "data"
collect_data(
root, variables = c("time", "EI"), pattern = "example", level = 1,
check_extant = FALSE, parnames = c("ecosel", "hsymmetry")
)
#' Collect data from across simulations
#'
#' Collect specified variables and parameters from across multiple simulation
#' folders
#'
#' @param root One of multiple paths to simulation folders or folders into
#' which to recurse to look for simulation folders.
#' @param check_extant Whether to check for non-extinct and non-crashed
#'  simulation folders
#' @param pattern Optional pattern to look for if simulation folders are
#' searched by recursion
#' @param level Level of recursion. Defaults to 0 for no recursion (then assumes
#' that `root` is a vector of simulation folder paths).
#' @param type The `type` argument of `read_this`
#' @param id_column Optional name of the simulation identifier column
#' @param ... Parameters to be passed to `read_this`
#'
#' @return A tibble
#'
#' @examples
#'
#' \dontrun{
#'
#' # Location of the simulation folder
#' root <- "data"
#'
#' # Collect simulation data with some parameters
#' collect_data(
#'   root, variables = c("time", "EI"), pattern = "example", level = 1,
#'   parnames = c("ecosel", "hsymmetry")
#' )
#'
#' collect_data(
#'   root, variables = "genome_Fst", pattern = "example", level = 1,
#'   parnames = c("ecosel", "hsymmetry"), architecture = TRUE, type = "genome"
#' )
#'
#' }
#'
#' @export
collect_data <- function(
root,
check_extant = FALSE,
pattern = "sim_",
level = 0,
type = "data",
id_column = "sim",
...
) {
# Fetch simulation folders
if (level > 0) root <- fetch_dirs(root, pattern = pattern, level = level)
# Find extant simulations if needed
if (check_extant) root <- find_extant(root)
# Read the data and combine
data <- purrr::map_dfr(root, read_this, type, ..., .id = id_column)
return(data)
}
root <- "data"
# Collect simulation data with some parameters
collect_data(
root, variables = c("time", "EI"), pattern = "example", level = 1,
parnames = c("ecosel", "hsymmetry")
)
collect_data(
root, variables = "genome_Fst", pattern = "example", level = 1,
parnames = c("ecosel", "hsymmetry"), architecture = TRUE, type = "genome"
)
collect_data(
root, variables = "network_corbreed", pattern = "example", level = 1,
parnames = c("ecosel", "hsymmetry"), architecture = TRUE, type = "network"
)
roxygen2::roxygenize()
library(egssimtools)
root <- "../data"
read_data(root, c("time", "EI"))
library(egssimtools)
# Path to the simulation folder
root <- "../data/example_1"
read_data(root, c("time", "EI"))
read_data(root, c("time", "EI"), parnames = c("ecosel", "hsymmetry"))
rm(list = ls())
library(egssimtools)
root <- "data/example_1"
data <- read_sim(root, "EI")
data
ggplot(data, aes(x = time, y = EI)) +
geom_line()
library(egssimtools)
library(tidyverse)
library(patchwork)
ggplot(data, aes(x = time, y = EI)) +
geom_line()
data <- read_sim(root, c("EI", "RI", "SI"))
ggplot(data, aes(x = time, y = value, color = variable)) +
geom_line()
data <- read_sim(root, c("EI", "RI", "SI"))
data <- pivot_data(data, c("EI", "RI", "SI"))
ggplot(data, aes(x = time, y = value, color = variable)) +
geom_line()
data <- read_pop(root, "Fst", by = 3)
data <- read_sim(root, "Fst", by = 3)
data <- read_sim(root, "Fst", by = 3)
data <- pivot_data(data, paste0("Fst", 1:3), newnames = 0:2)
data <- data %>% rename(trait = "variable")
data <- read_sim(root, "Fst", by = 3)
data <- pivot_data(data, paste0("Fst", 1:3), newnames = 0:2)
data <- data %>% rename(trait = "variable", Fst = "value")
ggplot(data, aes(x = time, y = Fst, color = trait))
ggplot(data, aes(x = time, y = Fst, color = trait)) +
geom_line()
ggplot(data, aes(x = time, y = Fst, color = trait)) +
geom_line() +
facet_grid(. ~ trait)
data <- read_pop(root, "individual_trait", by = 3)
data
data <- read_pop(root, "individual_trait", by = 3)
newnames <- paste0("trait ", 0:2)
data <- pivot_data(data, paste0("individual_trait", 1:3), newnames = newnames)
ggplot(data, aes(x = time, y = value)) +
geom_bin2d(bins = 20) +
facet_grid(. ~ trait)
data <- read_pop(root, "individual_trait", by = 3)
newnames <- paste0("trait ", 0:2)
data <- pivot_data(data, paste0("individual_trait", 1:3), newnames = newnames)
ggplot(data, aes(x = time, y = value)) +
geom_bin2d(bins = 20) +
facet_grid(. ~ trait)
data <- data %>% rename(trait = "variable")
ggplot(data, aes(x = time, y = value)) +
geom_bin2d(bins = 20) +
facet_grid(. ~ trait)
data <- read_genome(root, "genome_Fst")
data <- read_genome(root, "genome_Fst")
data <- data %>% filter(time == last(time))
ggplot(data, aes(x = locus, y = genome_Fst)) +
geom_point()
data <- read_genome(root, "genome_Fst", architecture = TRUE)
data <- data %>% filter(time == last(time))
ggplot(data, aes(x = location, y = genome_Fst, color = trait)) +
geom_point()
data <- read_genome(root, "genome_Fst", architecture = TRUE)
ggplot(data, aes(x = time, y = genome_Fst, alpha = locus, color = trait)) +
geom_line() +
guides(alpha = FALSE) +
facet_grid(. ~ trait)
ggplot(data, aes(x = time, y = genome_Fst, alpha = locus, color = trait)) +
geom_line() +
facet_grid(. ~ trait) +
guides(alpha = FALSE)
ggplot(data, aes(x = time, y = genome_Fst, alpha = factor(locus), color = trait)) +
geom_line() +
facet_grid(. ~ trait) +
guides(alpha = FALSE)
data <- smooth_data(data, "time", "genome_Fst", span = 0.1)
data <- read_genome(root, "genome_Fst", architecture = TRUE)
data <- smoothen_data(data, "time", "genome_Fst", span = 0.1)
ggplot(data, aes(x = time, y = genome_Fst, alpha = factor(locus), color = trait)) +
geom_line() +
facet_grid(. ~ trait) +
guides(alpha = FALSE)
data <- read_genome(root, "genome_Fst", architecture = TRUE)
data <- smoothen_data(data, "time", "genome_Fst", span = 0.1, line = "locus")
ggplot(data, aes(x = time, y = genome_Fst, alpha = factor(locus), color = trait)) +
geom_line() +
facet_grid(. ~ trait) +
guides(alpha = FALSE)
data <- read_genome(root, "genome_Fst", architecture = TRUE)
data <- smoothen_data(data, "time", "genome_Fst", span = 0.2, line = "locus")
ggplot(data, aes(x = time, y = genome_Fst, alpha = factor(locus), color = trait)) +
geom_line() +
facet_grid(. ~ trait) +
guides(alpha = FALSE)
data <- read_genome(root, "genome_Fst", architecture = TRUE)
data <- smoothen_data(data, "time", "genome_Fst", span = 0.3, line = "locus")
ggplot(data, aes(x = time, y = genome_Fst, alpha = factor(locus), color = trait)) +
geom_line() +
facet_grid(. ~ trait) +
guides(alpha = FALSE)
data <- read_genome(root, "genome_Fst", architecture = TRUE)
data <- data %>% filter(time == last(time))
p1 <- ggplot(data, aes(x = location, y = genome_Fst, color = trait)) +
geom_point()
p2 <- ggplot(data, aes(x = trait, y = genome_Fst, color = trait)) +
geom_violin()
wrap_plots(p1, p2)
data <- read_network(root, "network_corfreq", architecture = TRUE)
ggplot(data, aes(x = trait, y = network_corfreq)) +
geom_violin()
data <- read_network(root, "network_corfreq", architecture = TRUE)
ggplot(data, aes(x = trait, y = network_corfreq)) +
geom_violin()
data <- read_arch_network(root)
data
arch <- read_arch_network(root)
data <- read_genome(root, "genome_Fst")
data <- read_genome(root, "genome_Fst", architecture = TRUE)
arch %>% activate(nodes)
library(tidygraph)
library(ggraph)
arch %>% activate(nodes)
arch %>% activate(nodes) %>% right_join(data)
data <- data %>% filter(time == last(time))
arch %>% activate(nodes) %>% right_join(data)
arch <- read_arch_network(root)
data <- read_genome(root, "genome_Fst", architecture = TRUE)
data <- data %>% filter(time == last(time))
arch %>% activate(nodes) %>% right_join(data)
data
arch %>% activate(nodes)
arch <- read_arch_network(root, as_list = TRUE)$nodes
nrow(arch)
nrow(data)
data <- read_genome(root, "genome_Fst", architecture = TRUE)
data <- data %>% filter(time == last(time))
nrow(data)
data <- read_genome(root, "genome_Fst")
data <- data %>% filter(time == last(time))
nrow(data)
data <- read_genome(root, "genome_Fst")
nrow(data)
data <- read_genome(root, "genome_Fst", architecture = TRUE)
nrow(data)
data <- read_genome(root, "genome_Fst")
nrow(data)
arch <- read_arch_genome(root)
nrow(arch)
arch <- purrr::map_dfr(seq(20), ~ arch)
nrow(arch)
nrow(data)
data2 <- data %>% right_join(arch)
nrow(data2)
all(data$locus %in% arch$locus)
all(arch$locus %in% data$locus)
library(egssimtools)
arch <- read_arch_network(root, as_list = TRUE)$nodes
data <- read_genome(root, "genome_Fst", architecture = TRUE)
arch <- read_arch_network(root)
data <- read_genome(root, "genome_Fst", architecture = TRUE)
data <- data %>% filter(time == last(time))
arch <- read_arch_network(root)
data <- read_genome(root, "genome_Fst", architecture = TRUE)
data
library(egssimtools)
arch <- read_arch_network(root)
data <- read_genome(root, "genome_Fst", architecture = TRUE)
arch
arch <- read_arch_genome(root)
map_dfr(1:20, ~ arch)
map_dfr(1:20, ~ arch, .id = .x)
map_dfr(1:20, ~ arch, .id = "id")
map_dfr(c(1, 2, 3), ~ arch, .id = "id")
map_dfr(c(100, 200, 300), ~ arch, .id = "id")
?map_dfr
arch <- map_dfr(c(100, 200, 300), ~ arch, .id = "id")
arch <- read_arch_genome(root)
arch <- map_dfr(c(100, 200, 300), ~ arch %>% mutate(time = .x), .id = "id")
arch
#' Read locus-specific data through time
#'
#' Wrapper around `read_data` to read locus-wise data
#'
#' @param folder Path to the folder
#' @param variables What variables to read (`time` is included by default)
#' @param parnames,combine,as_numeric,parfile Parameters
#' for `read_data`
#' @param architecture Whether to attach genetic architecture data
#' @param archfile Optional name of the genetic architecture file
#' @param nloci Number of loci (automatically guessed if unspecified)
#'
#' @details The file `time.dat` must be present
#'
#' @return A tibble
#'
#' @examples
#'
#' \dontrun{
#'
#' # Location of the simulation folder
#' root <- "data/example_1"
#'
#' # Read Fst throughout the genome
#' read_genome(root, "genome_Fst")
#'
#' # Read multiple metrics and attach architecture
#' read_genome(root, c("genome_Fst", "genome_Cst"), architecture = TRUE)
#'
#' }
#'
#' @export
read_genome <- function(
folder,
variables,
parnames = NULL,
combine = FALSE,
as_numeric = NULL,
architecture = FALSE,
archfile = "architecture.txt",
parfile = "paramlog.txt",
nloci = NULL
) {
if (is.null(nloci)) nloci <- guess_nloci(folder, variables[1])
data <- read_data(
folder,
c("time", variables),
dupl = c(nloci, rep(1, length(variables))),
parnames = parnames,
combine = combine,
as_numeric = as_numeric,
parfile = parfile
)
data$locus <- rep(seq(nloci), nrow(data) / nloci)
if (architecture) {
ntimes <- nrow(data) / nloci
arch <- read_arch_genome(folder, archfile)
arch <- purrr::map_dfr(unique(data$time), ~ dplyr::mutate(arch, time = .x))
data <- data %>% dplyr::right_join(arch)
}
return(tibble(data))
}
data <- read_genome(root, "genome_Fst", architecture = TRUE)
data
data <- data %>% filter(time == last(time))
nrow(data)
library(egssimtools)
arch <- read_arch_network(root)
data <- read_genome(root, "genome_Fst", architecture = TRUE)
data <- data %>% filter(time == last(time))
arch %>% activate(nodes) %>% right_join(data)
arch <- arch %>% activate(nodes) %>% right_join(data)
ggraph(arch, layout = "graphopt", charge = 0.1, mass = 30, niter = 100000) +
geom_edge_link(aes(color = trait), width = 2, alpha = 0.6) +
geom_node_point(aes(fill = trait, size = y), shape = 21) +
scale_size_continuous(range = c(2, 7)) +
scale_alpha(range = c(0.6, 1)) +
labs(size = y, fill = "trait") +
theme_void() +
guides(edge_color = FALSE)
ggraph(arch, layout = "graphopt", charge = 0.1, mass = 30, niter = 100000) +
geom_edge_link(aes(color = trait), width = 2, alpha = 0.6) +
geom_node_point(aes(fill = trait, size = genome_Fst), shape = 21) +
scale_size_continuous(range = c(2, 7)) +
scale_alpha(range = c(0.6, 1)) +
labs(size = parse(text = "F[ST]"), fill = "trait") +
theme_void() +
guides(edge_color = FALSE)
root <- "data"
root <- "data"
data <- combine_data(root, pattern = "example", level = 1, type = "genome")
data <- combine_data(
root, pattern = "example", level = 1, type = "genome",
variables = "genome_Fst"
)
data <- combine_data(
root, pattern = "example", level = 1, type = "genome",
variables = "genome_Fst", architecture = TRUE,
parnames = c("ecosel", "hsymmetry")
)
data
data %>%
group_by(sim) %>%
nest()
data <- data %>% filter(time == last(time))
ggplot(data, aes(x = trait, y = genome_Fst)) +
geom_violin() +
facet_grid(sim ~ .)
data <- data %>% mutate(sim = str_replace(sim, "^", "simulation "))
ggplot(data, aes(x = trait, y = genome_Fst)) +
geom_violin() +
facet_grid(sim ~ .)
ggplot(data, aes(x = trait, y = genome_Fst)) +
geom_violin() +
facet_grid(seed ~ .)
data <- combine_data(
root, pattern = "example", level = 1, type = "genome",
variables = "genome_Fst", architecture = TRUE,
parnames = c("ecosel", "seed")
)
data <- data %>% filter(time == last(time))
data <- data %>% mutate(sim = str_replace(sim, "^", "simulation "))
ggplot(data, aes(x = trait, y = genome_Fst)) +
geom_violin() +
facet_grid(seed ~ .)
plot_this <- function(data) {
ggplot(
data,
aes(x = time, y = genome_Fst, color = trait, alpha = factor(locus))
) +
geom_line() +
facet_grid(. ~ trait)
}
root <- "data"
data <- combine_data(
root, pattern = "example", level = 1, type = "genome",
variables = "genome_Fst", architecture = TRUE
)
plot_this <- function(data) {
ggplot(
data,
aes(x = time, y = genome_Fst, color = trait, alpha = factor(locus))
) +
geom_line() +
facet_grid(. ~ trait)
}
data %>%
group_by(sim) %>%
nest() %>%
mutate(fig = map(data, plot_this))
plot_this <- function(data) {
ggplot(
data,
aes(x = time, y = genome_Fst, color = trait, alpha = factor(locus))
) +
geom_line() +
facet_grid(. ~ trait) +
guides(alpha = FALSE)
}
data %>%
group_by(sim) %>%
nest() %>%
mutate(fig = map(data, plot_this))
data <- data %>%
group_by(sim) %>%
nest() %>%
mutate(fig = map(data, plot_this))
data$fig[[1]]
data %>% mutate(figname = sprintf("sim%s", sim))
data <- data %>% mutate(figname = sprintf("sim%s.png", sim))
# Or combine into one
wrap_plots(data$fig, tag_level = "A")
# Or combine into one
wrap_plots(data$fig, tag_level = "new")
# Or combine into one
wrap_plots(data$fig) +
plot_layout(guides = 'collect')
# Or combine into one
wrap_plots(data$fig) +
plot_layout(guides = 'collect') +
plot_annotation(tag_levels = 'A')
library(egssimtools)
library(tidyverse)
library(patchwork)
library(tidygraph)
library(ggraph)
root <- "../data/example_1"
data <- read_sim(root, "EI")
data
ggplot(data, aes(x = time, y = EI)) +
geom_line()
ggplot(data, aes(x = time, y = EI)) +
geom_line()
data <- read_sim(root, c("EI", "RI", "SI"))
data
data <- pivot_data(data, c("EI", "RI", "SI"))
data
ggplot(data, aes(x = time, y = value, color = variable)) +
geom_line()
data <- read_sim(root, "Fst", by = 3)
data
data <- pivot_data(data, paste0("Fst", 1:3), newnames = paste0("trait ", 0:2))
data <- data %>% rename(trait = "variable", Fst = "value")
data
ggplot(data, aes(x = time, y = Fst, color = trait)) +
geom_line() +
facet_grid(. ~ trait) +
theme(legend.position = "none")
ggplot(data, aes(x = time, y = Fst, color = trait)) +
geom_line() +
facet_grid(. ~ trait) +
theme(legend.position = "none")
ggplot(data, aes(x = time, y = Fst, color = trait)) +
geom_line() +
facet_grid(. ~ trait) +
theme(legend.position = "none")
data <- read_pop(root, "individual_trait", by = 3)
data
root
