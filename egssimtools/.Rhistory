})
if (!is.null(parnames)) {
pars <- read_param(
folder, parnames, combine = combine, flatten = TRUE,
as_numeric = as_numeric, filename = parfile
)
pars <- pars %>% purrr::map_dfc(rep, nrow(data))
data <- dplyr::bind_cols(data, pars)
}
if (architecture) {
arch <- read_arch_genome(folder, filename = archfile)
ntimes <- nrow(data) / nrow(arch)
arch <- purrr::map_dfr(seq(ntimes), ~ arch)
data <- cbind(data, arch)
}
return (data)
}
read_data(root, c("time", "EI"), parnames = "ecosel")
library(egssimtools)
read_data(root, c("time", "EI"), parnames = "ecosel")
#' Read simulation data
#'
#' Function to read simulation data from binary files into a data frame. Can read multiple data files and bind them together.
#'
#' @param folder Path to the folder
#' @param variables What variables to read
#' @param by A list. For each variable, length of the chunks to split it by. Recycled if its length is one.
#' @param dupl A list. For each variable, how many times to duplicate each row. Provide an integer to duplicate every row the same number of times, a vector of integers to duplicate each row a specific number of times, or a character string to read a vector of number of times from a .dat file. This argument is recycled if its length is one.
#' @param parnames Character vector of parameter names to append to the simulation data
#' @param combine,as_numeric Parameters for `read_parameters`
#' @param architecture Whether to read and append locus-wise genetic architecture. Make sure then that you are reading `variables` that are locus-specific variables in long-format (one column per variable).
#' @param archfile Name of the architecture file, if needed
#' @param parfile Name of the parameter file, if needed
#'
#' @return A data frame
#'
#' @note Do not provide the extension of the files. It is assumed to be `.dat`.
#'
#' @seealso `read_sim`, `read_pop`, `read_genome`
#'
#' @examples
#'
#' # Location of the simulation folder
#' root <- "data/example_1"
#'
#' # Read Fst across the genome
#' read_data(root, c("time", "genome_Fst"), by = c(1, 300))
#'
#' # Attach parameter values to the simulation data
#' read_data(root, c("time", "EI"), parnames = "ecosel")
#'
#' @export
read_data <- function(
folder,
variables,
by = 1,
dupl = 1,
parnames = NULL,
combine = FALSE,
as_numeric = NULL,
architecture = FALSE,
archfile = "architecture.txt",
parfile = "paramlog.txt"
) {
data <- list(variables, by, dupl) %>%
purrr::pmap_dfc(function(variable, by, dupl) {
data <- read_binary(paste0(folder, "/", variable, ".dat")) %>%
split(rep(seq(length(.) / by), each = by)) %>%
do.call("rbind", .) %>%
data.frame
if (ncol(data) > 1) {
colnames <- paste0(variable, seq(ncol(data)))
} else {
colnames <- variable
}
if (is.character(dupl)) {
dupl <- read_binary(paste0(folder, "/", dupl, ".dat"))
}
if (length(dupl) == 1) dupl <- rep(dupl, nrow(data))
data <- data[egssimtools:::mrep(seq(nrow(data)), n = dupl), ] %>% data.frame
data <- data %>% rename_str(colnames)
})
if (!is.null(parnames)) {
pars <- read_param(
folder, parnames, combine = combine, flatten = TRUE,
as_numeric = as_numeric, filename = parfile
)
pars <- pars %>% purrr::map_dfc(rep, nrow(data))
data <- dplyr::bind_cols(data, pars)
}
if (architecture) {
arch <- read_arch_genome(folder, filename = archfile)
ntimes <- nrow(data) / nrow(arch)
arch <- purrr::map_dfr(seq(ntimes), ~ arch)
data <- cbind(data, arch)
}
return (data)
}
read_data(root, c("time", "EI"), parnames = "ecosel")
#' Collect simulation data
#'
#' Collect specified variables and parameters from across multiple simulation folders
#'
#' @param root One of multiple paths to simulation folders or folders into which to recurse to look for simulation folders.
#' @param variables Names of the variables to extract
#' @param by,dupl,parnames,combine,as_numeric Parameters to be passed to `read_data`
#' @param check_extant Whether to check for non-extinct and non-crashed simulation folders
#' @param pattern Optional pattern to look for if simulation folders are searched by recursion
#' @param level Level of recursion. Defaults to 0 for no recursion (hen assumes that `root` is a vector of simulation folder paths).
#' @param verbose Whether to display messages and progress bars
#' @param id_column Optional name of the simulation identifier column
#' @param architecture Whether to read a genetic architecture with the (locus-wise) data
#' @param archfile Name of the architecture file
#' @param parfile Name of the parameter file
#'
#' @return A data frame
#'
#' @examples
#'
#' # Location of the simulation folder
#' root <- "data"
#'
#' collect_sims(
#'   root, c("time", "EI"), pattern = "example", level = 1,
#'   check_extant = FALSE, parnames = c("ecosel", "hsymmetry")
#' )
#'
#' @export
collect_sims <- function(
root,
variables,
by = 1,
dupl = 1,
parnames = NULL,
combine = FALSE,
as_numeric = NULL,
check_extant = TRUE,
pattern = "sim_",
level = 0,
verbose = TRUE,
id_column = "sim",
architecture = FALSE,
archfile = "architecture.txt",
parfile = "paramlog.txt"
) {
# Fetch simulation folders
root <- fetch_dirs(root, pattern = pattern, level = level)
# Find extant simulations if needed
if (check_extant) {
root <- find_extant(root, pattern = pattern, verbose = verbose)
}
# Read the data and combine
if (verbose) message("Reading data...")
data <- root %>%
purrr::map_dfr(
read_data, variables, by, dupl, parnames, combine, as_numeric,
architecture, archfile, parfile, .id = id_column
)
return(data)
}
root <- "data"
collect_sims(
root, c("time", "EI"), pattern = "example", level = 1,
check_extant = FALSE, parnames = c("ecosel", "hsymmetry")
)
rm(list = ls())
library(egssimtools)
library(ggsim)
library(tidyverse)
root <- "/media/raphael/bigass/simulations/EGS"
root <- "/media/raphael/bigass/simulations/EGS/genomes3"
fetch_dirs(root, level = 1)
fetch_dirs(root, level = 2)
fetch_dirs(root, pattern = "sim", level = 2)
?fetch_dirs
root <- "data"
fetch_dirs(root, pattern = "example", level = 2)
fetch_dirs(root, pattern = "example", level = 1)
roots <- fetch_dirs(root, pattern = "example", level = 1)
read_sim(root, c("EI", "RI", "SI"))
root <- roots[1]
read_sim(root, c("EI", "RI", "SI"), )
read_sim(root, c("EI", "RI", "SI"))
cols <- c("EI", "RI", "SI")
names_to <- "variable"
values_to <- "value"
data <- pivot_longer(
data, cols = cols, names_to = names_to, values_to = values_to
)
data <- read_sim(root, c("EI", "RI", "SI"))
cols <- c("EI", "RI", "SI")
names_to <- "variable"
values_to <- "value"
data <- pivot_longer(
data, cols = cols, names_to = names_to, values_to = values_to
)
data <- pivot_longer(
data, cols = all_of(cols), names_to = names_to, values_to = values_to
)
data <- read_sim(root, c("EI", "RI", "SI"))
cols <- c("EI", "RI", "SI")
names_to <- "variable"
values_to <- "value"
data <- pivot_longer(
data, cols = all_of(cols), names_to = names_to, values_to = values_to
)
data
data %>%
mutate(variable = factor(variable)) %>%
mutate(variable = fct_recode(variable, eco = "EI"))
data %>%
mutate(variable = factor(variable)) %>%
mutate(variable = fct_recode(variable, c(eco = "EI", rep = "RI")))
data %>%
mutate(variable = factor(variable)) %>%
mutate(variable = fct_recode(variable, eco = "EI", rep = "RI"))
new <- c("eco", "rep", "spa")
?fct_recode
data %>%
mutate(variable = factor(variable)) %>%
mutate(variable = fct_recode(variable, !!!new))
data <- read_sim(root, c("EI", "RI", "SI"))
cols <- c("EI", "RI", "SI")
names_to <- "variable"
values_to <- "value"
data <- pivot_longer(
data, cols = all_of(cols), names_to = names_to, values_to = values_to
)
new <- c("eco", "rep", "spa")
data %>%
mutate(variable = factor(variable)) %>%
mutate(variable = fct_recode(variable, !!!new))
names(cols) <- new
data %>%
mutate(variable = factor(variable)) %>%
mutate(variable = fct_recode(variable, !!!new))
data %>%
mutate(variable = factor(variable)) %>%
mutate(variable = fct_recode(variable, !!!cols))
?all_of
data <- tidyr::pivot_longer(
data, cols = variables, names_to = "variable", values_to = "value"
)
variables <- c("EI", "RI", "SI")
data <- read_sim(root, c("EI", "RI", "SI"))
data <- tidyr::pivot_longer(
data, cols = variables, names_to = "variable", values_to = "value"
)
data <- read_sim(root, c("EI", "RI", "SI"))
pivot_data <- function(data, variables, newnames = NULL) {
data <- tidyr::pivot_longer(
data,
cols = tidyselect::all_of(variables),
names_to = "variable",
values_to = "value"
)
if (!is.null(newnames)) {
names(cols) <- newnames
data <- data %>%
dplyr::mutate(variable = factor(variable)) %>%
dplyr::mutate(variable = forcats::fct_recode(variable, !!!cols))
}
return(data)
}
data <- pivot_data(data, c("EI", "RI", "SI"))
data
data <- read_pop(root, "individual_trait")
data <- read_pop(root, "individual_trait", by = 3)
cols <- paste0("individual_trait", 1:3)
pivot_data(data, cols)
newnames <- 0:2
pivot_data(data, cols, newnames = 0:2)
data <- read_sim(root, c("EI", "RI", "SI"))
data <- pivot_data(data, c("EI", "RI", "SI"))
ggplot(data, aes(x = time, y = value, color = variable)) +
geom_line()
cols <- paste0("individual_trait", 1:3)
newnames <- 0:2
data <- pivot_data(data, cols, newnames)
data <- read_pop(root, "individual_trait")
cols <- paste0("individual_trait", 1:3)
newnames <- 0:2
data <- pivot_data(data, cols, newnames)
data <- read_pop(root, "individual_trait")
data <- read_pop(root, "individual_trait", by = 3)
cols <- paste0("individual_trait", 1:3)
newnames <- 0:2
data <- pivot_data(data, cols, newnames)
data <- data %>% rename(trait = "variable")
ggplot(data, aes(x = time, y = value)) +
geom_bin2d()
ggplot(data, aes(x = time, y = value)) +
geom_bin2d() +
facet_grid(trait ~ .)
ggplot(data, aes(x = time, y = value)) +
geom_bin2d(bins = 100) +
facet_grid(trait ~ .)
ggplot(data, aes(x = time, y = value)) +
geom_bin2d(bins = 50) +
facet_grid(trait ~ .)
ggplot(data, aes(x = time, y = value)) +
geom_bin2d(bins = 30) +
facet_grid(trait ~ .)
ggplot(data, aes(x = time, y = value)) +
geom_bin2d(bins = 20) +
facet_grid(trait ~ .)
variables <- c("EI", "RI", "SI")
data <- collect_sims(roots, variables)
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
data
roots
variables <- c("time", "EI", "RI", "SI")
data <- collect_sims(roots, variables)
data <- collect_sims(roots, variables, check_extant = FALSE)
data
data <- collect_sims(roots, variables, check_extant = FALSE, level = 0)
data
collect_sims(
"data", c("time", "EI"), pattern = "example", level = 1,
check_extant = FALSE, parnames = c("ecosel", "hsymmetry")
)
collect_sims(
roots, c("time", "EI"), pattern = "example", level = 0,
check_extant = FALSE, parnames = c("ecosel", "hsymmetry")
)
collect_sims(
roots, c("time", "EI"), level = 0,
check_extant = FALSE, parnames = c("ecosel", "hsymmetry")
)
collect_sims(
roots, c("time", "EI"), level = 0,
check_extant = FALSE, parnames = c("ecosel", "hsymmetry")
)
root <- "data"
fetch_dirs(root, "example")
fetch_dirs(root, "example", level = 1)
fetch_dirs(root, "example", level = 0)
roxygen2:roxygenize()
roxygen2::roxygenize()
library(egssimtools)
collect_sims(
roots, c("time", "EI"), level = 0,
check_extant = FALSE, parnames = c("ecosel", "hsymmetry")
)
collect_sims(
roots, c("time", "EI"), level = 0,
check_extant = FALSE, parnames = c("ecosel", "hsymmetry")
)
variables <- c("time", "EI", "RI", "SI")
data <- collect_sims(roots, variables, check_extant = FALSE, level = 0)
data
data <- pivot_data(data, variables[-1])
ggplot(data, aes(x = time, y = value, color = sim)) +
geom_line() +
facet_grid(. ~ variable)
data <- collect_sims(roots, "genome_Fst", check_extant = FALSE, level = 0)
data
data <- collect_sims(roots, "genome_Fst", check_extant = FALSE, level = 0, architecture = TRUE)
data <- collect_sims(roots, "genome_Fst", check_extant = FALSE, level = 0, architecture = TRUE)
library(egssimtools)
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
data <- collect_sims(roots, "genome_Fst", check_extant = FALSE, level = 0, architecture = TRUE)
data <- collect_sims(roots, "genome_Fst", check_extant = FALSE, level = 0, architecture = TRUE)
data
data <- data %>% filter(time == last(time))
data <- collect_sims(
roots, "genome_Fst", check_extant = FALSE, level = 0, architecture = TRUE
)
data <- data %>% filter(time == last(time))
data <- collect_sims(
roots, c("time", "genome_Fst"), dupl = c(300, 1), check_extant = FALSE,
level = 0, architecture = TRUE
)
data <- data %>% filter(time == last(time))
ggplot(data, aes(x = locus, y = genome_Fst)) +
geom_point() +
facet_grid(sim ~ .)
ggplot(data, aes(x = locus, y = genome_Fst, color = trait)) +
geom_point() +
facet_grid(sim ~ .)
data <- collect_sims(
roots, c("time", "genome_Fst"), dupl = c(300, 1), check_extant = FALSE,
level = 0, architecture = TRUE
)
plot_this <- function(data) {
ggplot(data, aes(x = time, y = genome_Fst, alpha = factor(locus))) +
geom_line() +
guides(alpha = FALSE)
}
data <- data %>%
group_by(sim) %>%
nest() %>%
mutate(fig = map(data, plot_this))
data$fig[[1]]
plot_this <- function(data) {
ggplot(data, aes(x = time, y = genome_Fst, alpha = factor(locus))) +
geom_line() +
guides(alpha = FALSE) +
facet_grid(trait ~ .)
}
data <- data %>%
group_by(sim) %>%
nest() %>%
mutate(fig = map(data, plot_this))
data <- collect_sims(
roots, c("time", "genome_Fst"), dupl = c(300, 1), check_extant = FALSE,
level = 0, architecture = TRUE
)
plot_this <- function(data) {
ggplot(data, aes(x = time, y = genome_Fst, alpha = factor(locus))) +
geom_line() +
guides(alpha = FALSE) +
facet_grid(trait ~ .)
}
data <- data %>%
group_by(sim) %>%
nest() %>%
mutate(fig = map(data, plot_this))
data$fig[[1]]
library(patchwork)
install.packages("patchwork")
library(patchwork)
?plot_layout
wrap_plots(data$fig)
devtools::install()
roots <- fetch_dirs("data", pattern = "example", level = 1)
roots
roots <- fetch_dirs("data", pattern = "example", level = 1)
roots
getwd()
roots <- fetch_dirs("../data", pattern = "example", level = 1)
roots
data <- read_sim(root, c("EI", "RI", "SI"))
roots <- fetch_dirs("../data", pattern = "example", level = 1)
library(egssimtools)
roots
# we are within the "vignettes" folder, hence the ".."
root <- roots[1]
data <- read_sim(root, c("EI", "RI", "SI"))
data <- pivot_data(data, c("EI", "RI", "SI"))
ggplot(data, aes(x = time, y = value, color = variable)) +
geom_line()
data <- read_sim(root, c("EI", "RI", "SI"))
data <- pivot_data(data, c("EI", "RI", "SI"))
ggplot(data, aes(x = time, y = value, color = variable)) +
geom_line() +
theme_bw()
library(egssimtools)
?pivot_data
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(egssimtools)
library(tidyverse)
library(patchwork)
library(egssimtools)
library(tidyverse)
library(patchwork)
roots <- fetch_dirs("../data", pattern = "example", level = 1)
roots
# we are within the "vignettes" folder, hence the ".."
root <- roots[1]
data <- read_sim(root, c("EI", "RI", "SI"))
tibble(data)
library(egssimtools)
data <- read_sim(root, c("EI", "RI", "SI"))
data
data <- pivot_data(data, c("EI", "RI", "SI"))
data
data
ggplot(data, aes(x = time, y = value, color = variable)) +
geom_line()
ggplot(data, aes(x = time, y = value, color = variable)) +
geom_line() +
theme_bw()
library(egssimtools)
data <- read_pop(root, "individual_trait", by = 3)
data
data <- read_pop(root, "individual_trait", by = 3)
data
cols <- paste0("individual_trait", 1:3)
newnames <- 0:2 # to match the C++ numbering of traits
data <- pivot_data(data, cols, newnames = newnames)
data <- data %>% rename(trait = "variable")
tibble(data)
ggplot(data, aes(x = time, y = value)) +
geom_bin2d(bins = 20) +
facet_grid(trait ~ .)
cols <- paste0("individual_trait", 1:3)
newnames <- paste0("trait ", 0:2) # to match the C++ numbering of traits
data <- pivot_data(data, cols, newnames = newnames)
data <- read_pop(root, "individual_trait", by = 3)
data
cols <- paste0("individual_trait", 1:3)
newnames <- paste0("trait ", 0:2) # to match the C++ numbering of traits
data <- pivot_data(data, cols, newnames = newnames)
data <- data %>% rename(trait = "variable")
tibble(data)
ggplot(data, aes(x = time, y = value)) +
geom_bin2d(bins = 20) +
facet_grid(trait ~ .)
ggplot(data, aes(x = time, y = value)) +
geom_bin2d(bins = 20) +
facet_grid(. ~ trait)
ggplot(data, aes(x = time, y = value)) +
geom_bin2d(bins = 20) +
facet_grid(. ~ trait)
ggplot(data, aes(x = time, y = value, color = variable)) +
geom_line()
