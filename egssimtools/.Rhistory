library(stringr)
tmp <- character()
if (!is.null(template)) tmp <- as.character(read.delim(template)[, 1])
for (i in seq_along(pars)) {
parname <- names(pars)[i]
par <- pars[i]
replacement <- paste(parname, par)
# Search for the pattern in the file
# If the pattern is found, replace all occurrences
# Otherwise, add the new line to the end
where <- grep(parname, tmp)
if (length(where) > 0) {
tmp[where] <- replacement
} else{
tmp <- c(tmp, replacement)
}
if (!is.null(saveto)) {
out <- file(saveto)
writeLines(tmp, out)
close(out)
}
return (tmp)
}
}
set_param_file(pars = list(scaleA = "0 0 0"), template = "parameters.txt")
set_param_file(pars = list(scaleA = "5 0 0"), template = "parameters.txt")
set_param_file(pars = list(scaleA = "5 0 0"))
#' Set up parameter file
#'
#' Function to create a parameter file with the requested parameter values
#'
#' @param pars A named list or vector of parameter values. Numeric values will be coerced to character. Please provide compound parameters as strings with space-separated values. Names should be the names of the parameters.
#' @param template Optional file to add or change parameters into (the file is not overwritten).
#' @param saveto Optional file where to save the output.
#'
#' @return A vector of parameter entries. Not very useful if `saveto` is NULL.
#'
#' @export
set_param_file <- function(pars, template = NULL, saveto = NULL) {
library(stringr)
tmp <- character()
if (!is.null(template)) tmp <- as.character(read.delim(template)[, 1])
for (i in seq_along(pars)) {
parname <- names(pars)[i]
par <- pars[i]
replacement <- paste(parname, par)
# Search for the pattern in the file
# If the pattern is found, replace all occurrences
# Otherwise, add the new line to the end
where <- grep(parname, tmp)
if (length(where) > 0) {
tmp[where] <- replacement
} else{
tmp <- c(tmp, replacement)
}
if (!is.null(saveto)) {
out <- file(saveto)
writeLines(tmp, out)
close(out)
}
return (tmp)
}
}
set_param_file(pars = list(scaleA = "5 0 0"))
set_param_file(pars = list(scaleA = "5 0 0"), template = "parameters.txt",
saveto = "param2.txt")
library(roxygen2)
roxygenize()
library(egssimtools)
library(egssimtools)
#' Set up parameter file
#'
#' Function to create a parameter file with the requested parameter values
#'
#' @param pars A named list or vector of parameter values. Numeric values will be coerced to character. Please provide compound parameters as strings with space-separated values. Names should be the names of the parameters.
#' @param template Optional file to add or change parameters into (the file is not overwritten).
#' @param saveto Optional file where to save the output.
#'
#' @return A vector of parameter entries, only if `saveto` is NULL.
#'
#' @export
set_param_file <- function(pars, template = NULL, saveto = NULL) {
library(stringr)
tmp <- character()
if (!is.null(template)) tmp <- as.character(read.delim(template)[, 1])
for (i in seq_along(pars)) {
parname <- names(pars)[i]
par <- pars[i]
replacement <- paste(parname, par)
# Search for the pattern in the file
# If the pattern is found, replace all occurrences
# Otherwise, add the new line to the end
where <- grep(parname, tmp)
if (length(where) > 0) {
tmp[where] <- replacement
} else{
tmp <- c(tmp, replacement)
}
if (is.null(saveto)) return (tmp)
out <- file(saveto)
writeLines(tmp, out)
close(out)
}
}
set_param_file(pars = list(scaleA = "5 0 0"), template = "parameters.txt")
set_param_file(pars)
pars <- list(hsymmetry = 0, ecosel = 1)
set_param_file(pars)
#' Set up parameter file
#'
#' Function to create a parameter file with the requested parameter values
#'
#' @param pars A named list or vector of parameter values. Numeric values will be coerced to character. Please provide compound parameters as strings with space-separated values. Names should be the names of the parameters.
#' @param template Optional file to add or change parameters into (the file is not overwritten).
#' @param saveto Optional file where to save the output.
#'
#' @return A vector of parameter entries, only if `saveto` is NULL.
#'
#' @export
set_param_file <- function(pars, template = NULL, saveto = NULL) {
library(stringr)
tmp <- character()
if (!is.null(template)) tmp <- as.character(read.delim(template)[, 1])
for (i in seq_along(pars)) {
parname <- names(pars)[i]
par <- pars[i]
replacement <- paste(parname, par)
# Search for the pattern in the file
# If the pattern is found, replace all occurrences
# Otherwise, add the new line to the end
where <- grep(parname, tmp)
if (length(where) > 0) {
tmp[where] <- replacement
} else{
tmp <- c(tmp, replacement)
}
}
if (is.null(saveto)) return (tmp)
out <- file(saveto)
writeLines(tmp, out)
close(out)
}
set_param_file(pars)
pars <- list(hsymmetry = 0, ecosel = 1, scaleA = "0 0 0")
set_param_file(pars)
pars <- list(hsymmetry = 0, ecosel = 1, scaleI = "1 0 0")
set_param_file(pars)
hsymmetries <- c(0, 1)
scaleIs <- c('0 0 0', '1 0 0')
seeds <- c(24, 42, 53, 12, 66)
expand_grid(hsymmetries, scaleIs, seeds)
hsymmetry <- c(0, 1)
scaleI <- c('0 0 0', '1 0 0')
seed <- c(24, 42, 53, 12, 66)
expand_grid(hsymmetries, scaleIs, seeds)
cmb <- expand_grid(hsymmetries, scaleIs, seeds)
library(tidyr)
cmb <- cmb %>%
mutate(
ecosel = ifelse(hsymmetry == 0, 1, 1.6),
scaleA = ifelse(scaleI == "0 0 0", "1 0 0", "0 0 0"),
tend = 20000,
tsave = 100
)
cmb <- expand_grid(hsymmetries, scaleIs, seeds)
cmb <- cmb %>%
mutate(
ecosel = ifelse(hsymmetry == 0, 1, 1.6),
scaleA = ifelse(scaleI == "0 0 0", "1 0 0", "0 0 0"),
tend = 20000,
tsave = 100
)
cmb <- expand_grid(hsymmetries, scaleIs, seeds)
cmb <- cmb %>%
mutate(
ecosel = ifelse(hsymmetry == 0, 1, 1.6),
scaleA = ifelse(scaleI == "0 0 0", "1 0 0", "0 0 0"),
tend = 20000,
tsave = 100
)
View(cmb)
hsymmetry <- c(0, 1)
scaleI <- c('0 0 0', '1 0 0')
seed <- c(24, 42, 53, 12, 66)
cmb <- expand_grid(hsymmetry, scaleI, seed)
cmb <- cmb %>%
mutate(
ecosel = ifelse(hsymmetry == 0, 1, 1.6),
scaleA = ifelse(scaleI == "0 0 0", "1 0 0", "0 0 0"),
tend = 20000,
tsave = 100
)
cmb
cmb <- cmb %>%
mutate(
ecosel = ifelse(hsymmetry == 0, 1, 1.6),
scaleA = ifelse(scaleI == "0 0 0", "1 0 1", "0 0 0"),
tend = 20000,
tsave = 100
)
# Setup parameter combinations
hsymmetry <- c(0, 1)
scaleI <- c('0 0 0', '1 1 1')
seed <- c(24, 42, 53, 12, 66)
cmb <- expand_grid(hsymmetry, scaleI, seed)
# Add extra parameters
cmb <- cmb %>%
mutate(
ecosel = ifelse(hsymmetry == 0, 1, 1.6),
scaleA = ifelse(scaleI == "0 0 0", "1 1 1", "0 0 0"),
tend = 20000,
tsave = 100
)
cmb
cmb %>% t
cmb %>% t %>% data.frame %>%
pars <- list(hsymmetry = 0, ecosel = 1, scaleI = "1 0 0")
cmb %>% t %>% data.frame
cmb[1, ]
set_param_file(cmb[1, ])
cmb %>% rownames_to_column("combination")
cmb <- cmb %>% rownames_to_column("combination")
cmb <- cmb %>% rownames_to_column("combination")
cmb <- cmb %>%
group_by(combination) %>%
group_map(set_param_file)
cmb <- cmb %>%
group_by(combination) %>%
group_map(~ set_param_file(.x))
cmb
cmb %>%
group_by(combination) %>%
group_map(~ set_param_file(.x))
cmb <- expand_grid(hsymmetry, scaleI, seed)
# Add extra parameters
cmb <- cmb %>%
mutate(
ecosel = ifelse(hsymmetry == 0, 1, 1.6),
scaleA = ifelse(scaleI == "0 0 0", "1 1 1", "0 0 0"),
tend = 20000,
tsave = 100
)
cmb <- cmb %>%
split[f = factor(seq(nrow(cmb)))]
cmb <- cmb %>%
split(f = factor(seq(nrow(cmb))))
cmb
cmb <- expand_grid(hsymmetry, scaleI, seed)
# Add extra parameters
cmb <- cmb %>%
mutate(
ecosel = ifelse(hsymmetry == 0, 1, 1.6),
scaleA = ifelse(scaleI == "0 0 0", "1 1 1", "0 0 0"),
tend = 20000,
tsave = 100
)
cmb <- cmb %>% split(f = factor(seq(nrow(cmb))))
folders <- paste0("sim", 1:20)
filename <- "%s/parameters.txt"
folders
folders %>% dir.create
folders <- paste0("./sim", 1:20)
folders %>% dir.create
folders <- paste0("sim", 1:20)
folders %>% map(dir.create)
map2(cmb, folders, ~ set_param_file(.x, template = "parameters.txt", saveto = .y))
map2(cmb, folders, ~ set_param_file(.x, template, saveto = sprintf(filename, .y)))
whattosave <- c(
"time",
"EI",
"RI",
"SI",
"population_size",
"individual_trait",
"Fst",
"Gst",
"Qst",
"Cst",
"varG",
"varA",
"varN",
"varT",
"genome_Fst",
"genome_Gst",
"genome_Qst",
"genome_Cst",
"genome_varG",
"genome_varA",
"genome_varN",
"genome_alpha",
"genome_meang",
"genome_freq",
"network_corgen",
"network_corbreed",
"network_corfreq",
"network_avgi",
"network_avgj"
)
folders
sprintf("%s/whattosave.txt", folders)
rm(list = ls())
library(egssimtools)
library(tidyr)
# Setup parameter combinations
hsymmetry <- c(0, 1)
scaleI <- c('0 0 0', '1 1 1')
seed <- c(24, 42, 53, 12, 66)
cmb <- expand_grid(hsymmetry, scaleI, seed)
# Add extra parameters
cmb <- cmb %>%
mutate(
ecosel = ifelse(hsymmetry == 0, 1, 1.6),
scaleA = ifelse(scaleI == "0 0 0", "1 1 1", "0 0 0"),
tend = 20000,
tsave = 100
)
# Make parameter files and save them into respective folders
cmb <- cmb %>% split(f = factor(seq(nrow(cmb))))
folders <- paste0("sim", 1:20)
folders %>% map(dir.create)
filename <- "%s/parameters.txt"
template <- "parameters.txt"
map2(cmb, folders, ~ set_param_file(.x, template, saveto = sprintf(filename, .y)))
roxygenize()
library(egssimtools)
rm(list = ls())
library(egssimtools)
library(tidyr)
# Setup parameter combinations
hsymmetry <- c(0, 1)
scaleI <- c('0 0 0', '1 1 1')
seed <- c(24, 42, 53, 12, 66)
cmb <- expand_grid(hsymmetry, scaleI, seed)
# Add extra parameters
cmb <- cmb %>%
mutate(
ecosel = ifelse(hsymmetry == 0, 1, 1.6),
scaleA = ifelse(scaleI == "0 0 0", "1 1 1", "0 0 0"),
tend = 20000,
tsave = 100
)
# Make parameter files and save them into respective folders
cmb <- cmb %>% split(f = factor(seq(nrow(cmb))))
folders <- paste0("sim", 1:20)
folders %>% map(dir.create)
filename <- "%s/parameters.txt"
template <- "parameters.txt"
map2(cmb, folders, ~ set_param_file(.x, template, saveto = sprintf(filename, .y)))
# Write a whattosave into each simulation folder
whattosave <- c(
"time",
"EI",
"RI",
"SI",
"population_size",
"individual_trait",
"Fst",
"Gst",
"Qst",
"Cst",
"varG",
"varA",
"varN",
"varT",
"genome_Fst",
"genome_Gst",
"genome_Qst",
"genome_Cst",
"genome_varG",
"genome_varA",
"genome_varN",
"genome_alpha",
"genome_meang",
"genome_freq",
"network_corgen",
"network_corbreed",
"network_corfreq",
"network_avgi",
"network_avgj"
)
map(
sprintf("%s/whattosave.txt", folders),
function(fname) {
f <- file(fname)
writeLines(whattosave, f)
close(f)
}
)
root <- "/media/raphael/bigass/simulations/EGS/"
root <- "/media/raphael/bigass/simulations/EGS/genomes"
roots <- fetch_dirs(root, pattern = "^sim", level = 1)
library(egssimtools)
roots <- fetch_dirs(root, pattern = "^sim", level = 1)
roots <- find_extant(roots)
?read_data
variables <- c("EI", "RI", "SI")
roots %>% map_dfr(read_data, variables)
variables <- c("EI", "RI", "SI", "Fst")
by <- c(1, 1, 1, 3)
data <- roots %>% map_dfr(read_data, variables, by = by)
variables <- c("time", "EI", "RI", "SI", "Fst")
by <- c(1, 1, 1, 1, 3)
data <- roots %>% map_dfr(read_data, variables, by = by)
variables <- c("time", "EI", "RI", "SI", "Fst", "Gst", "Qst", "Cst", "varG", "varA", "varN", "varT")
by <- c(1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3)
data <- roots %>% map_dfr(read_data, variables, by = by)
head(data)
library(ggsim)
ggplotline(data, x = "time", y = "EI")
gglineplot(data, x = "time", y = "EI")
data$simulation <- seq(nrow(data))
gglineplot(data, x = "time", y = "EI")
gglineplot(data, x = "time", y = "EI", line = "simulation")
variables <- c("time", "EI", "RI", "SI", "Fst", "Gst", "Qst", "Cst", "varG", "varA", "varN", "varT")
by <- c(1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3)
data <- roots %>% map_dfr(read_data, variables, by = by, .id = "simulation")
gglineplot(data, x = "time", y = "EI", line = "simulation")
gglineplot(data, x = "time", y = "Fst1", line = "simulation")
gglineplot(data, x = "EI", y = "Fst1", line = "simulation")
gglineplot(data, x = "RI", y = "Fst1", line = "simulation")
gglineplot(data, x = "RI", y = "Fst2", line = "simulation")
gglineplot(data, x = "RI", y = "Fst3", line = "simulation")
gglineplot(data, x = "time", y = "RI", line = "simulation")
gglineplot(data, x = "time", y = "varA", line = "simulation")
gglineplot(data, x = "time", y = "varA1", line = "simulation")
parnames <- c("ecosel", "hsymmetry", "scaleI")
data <- roots %>% map_dfr(read_data, variables, by = by, parnames = parnames, .id = "simulation")
gglineplot(data, x = "time", y = "varA1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "varN1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "varA1", y = "varN1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "varA1", y = "varA2", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "EI", y = "varA1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "EI", y = "varN1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "EI", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "varA2", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "varA1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "varA3", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Fst", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Fs1t", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Fst1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Fst2", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Fst3", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Gst1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Gst2", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Gst3", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Qst1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "varA1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Qst1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "varA1", y = "Qst1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Qst1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Qst2", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Qst3", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Cst1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Cst2", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Cst3", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
gglineplot(data, x = "time", y = "Fst1", line = "simulation") +
facet_grid(hsymmetry ~ scaleI1)
?read_data
data2 <- roots %>% map_dfr(function(root) {
d <- read_data(root, variables, by = by, parnames = parnames)
a <- read_genome_architecture(root)
data.frame(d, a)
}, i.d = "simulation")
data2 <- roots %>% map_dfr(function(root) {
d <- read_data(root, variables, by = by, parnames = parnames)
a <- read_genome_architecture(root)
data.frame(d, a)
}, .id = "simulation")
variables <- c("time", "genome_Fst")
by <- c(1, 1)
dupl <- c(300, 1)
parnames <- c("ecosel", "hsymmetry", "scaleI")
data2 <- roots %>% map_dfr(function(root) {
d <- read_data(root, variables, by = by, parnames = parnames)
a <- read_genome_architecture(root)
data.frame(d, a)
}, .id = "simulation")
data2 <- roots %>% map_dfr(function(root) {
d <- read_data(root, variables, by = by, dupl = dupl, parnames = parnames)
a <- read_genome_architecture(root)
data.frame(d, a)
}, .id = "simulation")
head(data)
head(data2)
