root,
y,
plot_type = "violin",
x = NULL,
t = NULL
) {
data <- read_loci(root, y, architecture = TRUE, archfile = archfile)
if (is.null(t)) t <- dplyr::last(data$time)
data <- data %>% dplyr::filter(time == t)
ggsim::ggdensityplot(data, y, plot_type)
}
root <- system.file("extdata", "example_1", package = "egssimtools")
plot_genome_distrib()
plot_genome_distrib(root, "genome_Fst")
plot_genome_distrib <- function(
root,
y,
plot_type = "violin",
x = NULL,
t = NULL,
archfile = "architecture.txt"
) {
data <- read_loci(root, y, architecture = TRUE, archfile = archfile)
if (is.null(t)) t <- dplyr::last(data$time)
data <- data %>% dplyr::filter(time == t)
ggsim::ggdensityplot(data, y, plot_type)
}
root <- system.file("extdata", "example_1", package = "egssimtools")
plot_genome_distrib(root, "genome_Fst")
plot_genome_distrib <- function(
root,
y,
plot_type = "violin",
x = NULL,
t = NULL,
archfile = "architecture.txt",
...
) {
data <- read_loci(root, y, architecture = TRUE, archfile = archfile)
if (is.null(t)) t <- dplyr::last(data$time)
data <- data %>% dplyr::filter(time == t)
ggsim::ggdensityplot(data, y, plot_type, ...)
}
root <- system.file("extdata", "example_1", package = "egssimtools")
plot_genome_distrib(root, "genome_Fst")
plot_genome_distrib <- function(
root,
y,
plot_type = "violin",
x = NULL,
t = NULL,
archfile = "architecture.txt",
...
) {
data <- read_loci(root, y, architecture = TRUE, archfile = archfile)
if (is.null(t)) t <- dplyr::last(data$time)
data <- data %>% dplyr::filter(time == t)
ggsim::ggviolin(data, y)
}
root <- system.file("extdata", "example_1", package = "egssimtools")
plot_genome_distrib(root, "genome_Fst")
library(ggsim)
rm(list = ls())
library(egssimtools)
plot_genome_distrib <- function(
root,
y,
plot_type = "violin",
x = NULL,
t = NULL,
archfile = "architecture.txt",
...
) {
data <- read_loci(root, y, architecture = TRUE, archfile = archfile)
if (is.null(t)) t <- dplyr::last(data$time)
data <- data %>% dplyr::filter(time == t)
ggsim::ggviolin(data, y)
}
root <- system.file("extdata", "example_1", package = "egssimtools")
plot_genome_distrib(root, "genome_Fst")
plot_genome_distrib <- function(
root,
y,
plot_type = "violin",
x = NULL,
t = NULL,
archfile = "architecture.txt",
...
) {
data <- read_loci(root, y, architecture = TRUE, archfile = archfile)
if (is.null(t)) t <- dplyr::last(data$time)
data <- data %>% dplyr::filter(time == t)
ggsim::ggdensityplot(data, y)
}
root <- system.file("extdata", "example_1", package = "egssimtools")
plot_genome_distrib(root, "genome_Fst")
plot_genome_distrib <- function(
root,
y,
plot_type = "violin",
x = NULL,
t = NULL,
archfile = "architecture.txt",
...
) {
data <- read_loci(root, y, architecture = TRUE, archfile = archfile)
if (is.null(t)) t <- dplyr::last(data$time)
data <- data %>% dplyr::filter(time == t)
ggsim::ggdensityplot(data, y, plot_type)
}
root <- system.file("extdata", "example_1", package = "egssimtools")
plot_genome_distrib(root, "genome_Fst")
library(egssimtools)
plot_genome_distrib <- function(
root,
y,
plot_type = "violin",
x = NULL,
t = NULL,
archfile = "architecture.txt",
...
) {
data <- read_loci(root, y, architecture = TRUE, archfile = archfile)
if (is.null(t)) t <- dplyr::last(data$time)
data <- data %>% dplyr::filter(time == t)
ggsim::ggdensityplot(data, y, plot_type, ...)
}
root <- system.file("extdata", "example_1", package = "egssimtools")
plot_genome_distrib(root, "genome_Fst", x = "trait")
library(egssimtools)
plot_genome_distrib <- function(
root,
y,
plot_type = "violin",
x = NULL,
t = NULL,
archfile = "architecture.txt",
...
) {
data <- read_loci(root, y, architecture = TRUE, archfile = archfile)
if (is.null(t)) t <- dplyr::last(data$time)
data <- data %>% dplyr::filter(time == t)
ggsim::ggdensityplot(data, y, plot_type, ...)
}
root <- system.file("extdata", "example_1", package = "egssimtools")
plot_genome_distrib(root, "genome_Fst", x = "trait")
plot_genome_distrib <- function(
root,
y,
plot_type = "violin",
t = NULL,
archfile = "architecture.txt",
...
) {
data <- read_loci(root, y, architecture = TRUE, archfile = archfile)
if (is.null(t)) t <- dplyr::last(data$time)
data <- data %>% dplyr::filter(time == t)
ggsim::ggdensityplot(data, y, plot_type, ...)
}
root <- system.file("extdata", "example_1", package = "egssimtools")
plot_genome_distrib(root, "genome_Fst", x = "trait")
plot_genome_distrib(root, "genome_Fst", x = "trait", mapping = list(fill = "trait"))
roxygen2::roxygenize()
library(egssimtools)
roxygen2::roxygenize()
library(egssimtools)
rm(list = ls())
roxygen2::roxygenize()
roxygen2::roxygenize()
library(egssimtools)
ggplot(mtcars, aes(x = mpg, y = cyl, color = NULL)) + geom_point()
library(ggplot2)
ggplot(mtcars, aes(x = mpg, y = cyl, color = NULL)) + geom_point()
ggplot(mtcars, aes_string(x = "mpg", y = "cyl", color = NULL)) + geom_point()
?tbl_graph
roxygen2::roxyygenize()
roxygen2::roxygenize()
library(egssimtools)
library(egssimtools)
library(tidyverse)
library(cowplot)
root <- system.file("extdata", "example_1", package = "egssimtools")
plot_simulation_line(root, "EI")
plot_sim_line(root, "EI")
plot_sim_line(root, "EI")
plot_sim_line(root, "EI")
plot_sim_line(root, "RI", x = "EI")
library(egssimtools)
root <- system.file("extdata", "example_1", package = "egssimtools")
plot_sim_line(root, "EI")
plot_sim_line(root, "RI", x = "EI")
read_sim(root, "EI")
read_sim(root, c("EI", "RI"))
#' Read simulation summary through time
#'
#' Wrapper around `read_data` to read timepoint-wise summary data
#'
#' @param folder Path to the folder
#' @param variables What variables to read (`time` is included by default)
#' @param by Same as the `by` argument of `read_data` (do not count `time` in)
#' @param parnames,combine,as_numeric,parfile Parameters for `read_data`
#'
#' @details The file `time.dat` must be present
#'
#' @return A data frame
#'
#' @examples
#'
#' root <- system.file("extdata", "example_1", package = "egssimtools")
#' read_sim(root, "EI")
#'
#' @export
read_sim <- function(
folder,
variables,
by = rep(1, length(variables)),
parnames = NULL,
combine = FALSE,
as_numeric = NULL,
parfile = "paramlog.txt"
) {
variables <- c("time", variables)
by <- c(1, by)
read_data(
folder, variables, by, parnames = parnames, combine = combine,
as_numeric = as_numeric, parfile = parfile
)
}
read_sim(root, c("EI", "RI"))
#' Plot a simulation-wise variable
#'
#' @param root Path to the simulation folder
#' @param y Variable to plot
#' @param x Optional variable for the horizontal axis. Defaults to "time".
#' @param by Numbers of columns in which to split variable `x` (only if `x` is not "time") and `y`. See `?read_data`.
#' @param j If variable `y` is splitted, which column to show?
#' @param k If variable `x` is splitted, which column to show?
#' @param ... Parameters to be passed to `geom_path`
#'
#' @return A ggplot
#'
#' @examples
#'
#' root <- system.file("extdata", "example_1", package = "egssimtools")
#' plot_sim_line(root, "EI")
#' plot_sim_line(root, "RI", x = "EI")
#'
#' @export
plot_sim_line <- function(root, y, x = "time", by = NULL, j = 1, k = 1, ...) {
to_read <- y
if (x != "time" & x != y) to_read <- c(x, y)
if (is.null(by)) by <- rep(1, to_read)
data <- read_sim(root, to_read, by)
xcol <- colnames(data)[grep(x, colnames(data))][k]
ycol <- colnames(data)[grep(y, colnames(data))][j]
ggplot2::ggplot(data, ggplot2::aes(x = get(xcol), y = get(ycol))) +
ggplot2::geom_path(...) +
ggplot2::theme_bw() +
ggplot2::labs(x = xcol, y = ycol)
}
plot_sim_line(root, "RI", x = "EI", by = c(1, 1))
plot_sim_line(root, "RI", x = "EI")
#' Plot a simulation-wise variable
#'
#' @param root Path to the simulation folder
#' @param y Variable to plot
#' @param x Optional variable for the horizontal axis. Defaults to "time".
#' @param by Numbers of columns in which to split variable `x` (only if `x` is not "time") and `y`. See `?read_data`.
#' @param j If variable `y` is splitted, which column to show?
#' @param k If variable `x` is splitted, which column to show?
#' @param ... Parameters to be passed to `geom_path`
#'
#' @return A ggplot
#'
#' @examples
#'
#' root <- system.file("extdata", "example_1", package = "egssimtools")
#' plot_sim_line(root, "EI")
#' plot_sim_line(root, "RI", x = "EI")
#'
#' @export
plot_sim_line <- function(root, y, x = "time", by = NULL, j = 1, k = 1, ...) {
to_read <- y
if (x != "time" & x != y) to_read <- c(x, y)
if (is.null(by)) by <- rep(1, length(to_read))
data <- read_sim(root, to_read, by)
xcol <- colnames(data)[grep(x, colnames(data))][k]
ycol <- colnames(data)[grep(y, colnames(data))][j]
ggplot2::ggplot(data, ggplot2::aes(x = get(xcol), y = get(ycol))) +
ggplot2::geom_path(...) +
ggplot2::theme_bw() +
ggplot2::labs(x = xcol, y = ycol)
}
plot_sim_line(root, "RI", x = "EI")
# Fst of the ecological trait versus that of the mating trait
plot_sim_line(root, y = "Fst", x = "Fst", j = 1, k = 2)
# Fst of the ecological trait versus that of the mating trait
plot_sim_line(root, y = "Fst", x = "Fst", by = 3, j = 1, k = 2)
# Plot the distribution of ecological trait values at the end of the simulation
plot_pop_density(root, y = "individual_trait", j = 1, plot_type = "density")
# Plot the distribution of ecological trait values at the end of the simulation
plot_pop_density(
root, y = "individual_trait", by = 3, j = 1, plot_type = "density"
)
plot_pop_bin2d(root, "individual_trait", by = 3, j = 1)
#' Plot population distribution through time
#'
#' @param root Path to the simulation folder
#' @param y Variable to plot the density for
#' @param x Optional variable for the horizontal axis. Defaults to "time".
#' @param by Numbers of columns in which to split variable `x` (only if `x` is
#' not "time" and not `y`) and `y`. See `?read_data`.
#' @param j If variable `y` is splitted, which column to show?
#' @param k If variable `x` is splitted, which column to show?
#' @param t Optional time point to subset (makes sense if the heatmap is not
#' through time). Provide a negative number to automatically filter only the
#' last time point.
#' @param ... Parameters to be passed to `geom_path`
#'
#' @return A ggplot
#'
#' @examples
#'
#' root <- system.file("extdata", "example_1", package = "egssimtools")
#' plot_pop_bin2d(root, "individual_trait", by = 3, j = 1)
#'
#' # Plot the mating versus ecological trait
#' plot_pop_bin2d(
#'   root, "individual_trait", x = "individual_trait", by = 3,
#'   j = 2, k = 1
#' )
#'
#' @export
plot_pop_bin2d <- function(
root,
y,
x = "time",
by = 1,
j = 1,
k = 1,
t = NULL,
...
) {
to_read <- y
if (x != "time" & x != y) to_read <- c(x, y)
data <- read_indiv(root, to_read, by)
xcol <- colnames(data)[grep(x, colnames(data))][k]
ycol <- colnames(data)[grep(y, colnames(data))][j]
if (!is.null(t)) {
if (t < 0) t <- dplyr::last(data$time)
data <- data %>% dplyr::filter(time == t)
}
ggplot2::ggplot(data, ggplot2::aes_string(x = xcol, y = ycol)) +
ggplot2::geom_bin2d(...) +
ggplot2::theme_bw()
}
# Plot the distribution of ecological trait values at the end of the simulation
plot_pop_density(
root, "individual_trait", by = 3, j = 1, plot_type = "density"
)
plot_pop_bin2d(root, "individual_trait", by = 3, j = 1)
plot_pop_bin2d(
root, y = "individual_trait", x = "individual_trait", by = 3, j = 1, k = 2
)
plot_genome_scan(root, "genome_Fst")
plot_genome_scan(root, "genome_Fst", mapping = list(color = "trait"))
plot_genome_heatmap(root, "genome_Fst")
plot_genome_heatmap(root, "genome_Fst")
plot_genome_density(root, "genome_Fst", plot_type = "histogram")
plot_genome_density(root, "genome_Fst", plot_type = "histogram", bins = 50)
plot_genome_density(
root, "genome_Fst", mapping = list(fill = "trait"), plot_type = "violin"
)
plot_genome_density(
root, "genome_Fst", x = "trait", mapping = list(fill = "trait"),
plot_type = "violin"
)
plot_genome_ridges(
root, "genome_Fst", times = c(100, 200, 300), facet_by = "trait"
)
plot_genome_ridges(
root, "genome_Fst", times = c(100, 200, 300), facet_by = "trait"
)
plot_network(root, "genome_Fst")
#' Plot gene network
#'
#' @param root Path to the simulation folder
#' @param y Name of the variable to map as node size aesthetics
#' @param t What time point? Defaults to last time point
#' @param archfile Optional architecture file name
#'
#' @return A ggplot
#'
#' @examples
#'
#' root <- system.file("extdata", "example_1", package = "egssimtools")
#' plot_network(root, "genome_Fst")
#'
#' @export
plot_network <- function(root, y, t = NULL, archfile = "architecture.txt") {
data <- read_loci(root, y, architecture = TRUE, archfile = archfile)
if (is.null(t)) t <- dplyr::last(data$time)
data <- data %>% dplyr::filter(time == t)
arch <- read_network_architecture(root)
arch <- arch %>%
tidygraph::activate(nodes) %>%
dplyr::right_join(data)
p <- ggraph::ggraph(
arch, layout = "graphopt", charge = 0.1, mass = 30, niter = 100000
) +
ggraph::geom_edge_link(
ggplot2::aes(color = factor(trait)), width = 2, alpha = 0.6
) +
ggraph::geom_node_point(
ggplot2::aes_string(fill = "trait", size = y), shape = 21
) +
ggplot2::scale_size_continuous(range = c(2, 7)) +
ggplot2::scale_alpha(range = c(0.6, 1)) +
ggplot2::labs(size = y, fill = "trait") +
ggplot2::theme_void() +
ggplot2::guides(edge_color = FALSE)
p
}
plot_network(root, "genome_Fst")
#' Plot gene network
#'
#' @param root Path to the simulation folder
#' @param y Name of the variable to map as node size aesthetics
#' @param t What time point? Defaults to last time point
#' @param archfile Optional architecture file name
#'
#' @return A ggplot
#'
#' @examples
#'
#' root <- system.file("extdata", "example_1", package = "egssimtools")
#' plot_network(root, "genome_Fst")
#'
#' @export
plot_network <- function(root, y, t = NULL, archfile = "architecture.txt") {
data <- read_loci(root, y, architecture = TRUE, archfile = archfile)
if (is.null(t)) t <- dplyr::last(data$time)
data <- data %>% dplyr::filter(time == t)
arch <- read_network_architecture(root)
arch <- arch %>%
tidygraph::activate(nodes) %>%
dplyr::right_join(data)
p <- ggraph::ggraph(
arch, layout = "graphopt", charge = 0.1, mass = 30, niter = 100000
) +
ggraph::geom_edge_link(
ggplot2::aes_string(color = trait), width = 2, alpha = 0.6
) +
ggraph::geom_node_point(
ggplot2::aes_string(fill = "trait", size = y), shape = 21
) +
ggplot2::scale_size_continuous(range = c(2, 7)) +
ggplot2::scale_alpha(range = c(0.6, 1)) +
ggplot2::labs(size = y, fill = "trait") +
ggplot2::theme_void() +
ggplot2::guides(edge_color = FALSE)
p
}
plot_network(root, "genome_Fst")
#' Plot gene network
#'
#' @param root Path to the simulation folder
#' @param y Name of the variable to map as node size aesthetics
#' @param t What time point? Defaults to last time point
#' @param archfile Optional architecture file name
#'
#' @return A ggplot
#'
#' @examples
#'
#' root <- system.file("extdata", "example_1", package = "egssimtools")
#' plot_network(root, "genome_Fst")
#'
#' @export
plot_network <- function(root, y, t = NULL, archfile = "architecture.txt") {
data <- read_loci(root, y, architecture = TRUE, archfile = archfile)
if (is.null(t)) t <- dplyr::last(data$time)
data <- data %>% dplyr::filter(time == t)
arch <- read_network_architecture(root)
arch <- arch %>%
tidygraph::activate(nodes) %>%
dplyr::right_join(data)
p <- ggraph::ggraph(
arch, layout = "graphopt", charge = 0.1, mass = 30, niter = 100000
) +
ggraph::geom_edge_link(
ggplot2::aes_string(color = "trait"), width = 2, alpha = 0.6
) +
ggraph::geom_node_point(
ggplot2::aes_string(fill = "trait", size = y), shape = 21
) +
ggplot2::scale_size_continuous(range = c(2, 7)) +
ggplot2::scale_alpha(range = c(0.6, 1)) +
ggplot2::labs(size = y, fill = "trait") +
ggplot2::theme_void() +
ggplot2::guides(edge_color = FALSE)
p
}
plot_network(root, "genome_Fst")
plot_network_blank(root)
library(egssimtools)
roxygen2::roxygenize()
roxygen2::roxygenize()
library(egssimtools)
plot_network_blank(root)
# Plot Fst mapped onto the network (takes a while)
plot_network(root, "genome_Fst")
