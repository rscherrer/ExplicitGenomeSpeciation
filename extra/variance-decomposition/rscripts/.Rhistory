) %>%
ungroup()
get_matrix <- function(data, variable) {
data %>%
select(ecotype, count, !!!variable) %>%
pivot_wider(names_from = "count", values_from = variable) %>%
select(-ecotype) %>%
as.matrix()
}
marginalize <- function(m) {
m <- cbind(m, apply(m, 1, sum))
rbind(m, apply(m, 2, sum))
}
var_raw <- function(x) mean(x^2) - mean(x)^2
gcounts <- marginalize(get_matrix(smr, "n"))
gsumgen <- marginalize(get_matrix(smr, "sumgen"))
gssqgen <- marginalize(get_matrix(smr, "ssqgen"))
n <- gcounts[3, 4]
meang <- gsumgen[3, 4] / n
meanq <- (gcounts[3, 2] + 2 * gcounts[3, 3]) / n
#meang == mean(data$value)
#meanq == mean(data$count)
covqg <- (2 * gsumgen[3, 3] + gsumgen[3, 2]) / n - meanq * meang
varq <- (4 * gcounts[3, 3] + gcounts[3, 2]) / n - meanq^2
covqg == mean(with(data, count * value)) - meanq * meang
varq == var_raw(data$count)
alpha <- covqg / varq
mod <- lm(value ~ count, data = data)
intercept <- mod$coefficients[1]
slope <- mod$coefficients[2]
#alpha == slope
gexpec <- map_dbl(0:2, ~ meang + alpha * (.x - meanq))
gmeans <- map2_dbl(gsumgen[3, 1:3], gcounts[3, 1:3], ~ .x / .y)
gexpec == map_dbl(0:2, ~ intercept + alpha * .x)
gmeans == tapply(data$value, data$count, mean)
beta <- gexpec - meang
delta <- gmeans - gexpec
varA <- apply(gcounts, 1, function(x) sum(x[1:3] * beta^2) / x[4] - (sum(x[1:3] * beta) / x[4])^2)
varA
apply(gcounts, 1, function(x) var_raw(do.call("c", map2(beta, x[1:3], ~ rep(.x, .y)))))
varD <- apply(gcounts, 1, function(x) sum(x[1:3] * delta^2) / x[4] - (sum(x[1:3] * delta) / x[4])^2)
varD
apply(gcounts, 1, function(x) var_raw(do.call("c", map2(delta, x[1:3], ~ rep(.x, .y)))))
get_resid_var <- function(i, from) {
msq <- gssqgen[i, 4] - 2 * sum(from * gsumgen[i, 1:3]) + sum(gcounts[i, 1:3] * from^2)
msq <- msq / gcounts[i, 4]
sqm <- gsumgen[i, 4] - sum(gcounts[i, 1:3] * from)
sqm <- (sqm / gcounts[i, 4])^2
msq - sqm
}
varI <- map_dbl(1:3, get_resid_var, gmeans)
varN <- map_dbl(1:3, get_resid_var, gexpec)
data <- data %>%
mutate(
epsilon = value - gmeans[count + 1],
gamma = value - gexpec[count + 1]
)
varI
c(tapply(data$epsilon, data$ecotype, var_raw), var_raw(data$epsilon))
varN
c(tapply(data$gamma, data$ecotype, var_raw), var_raw(data$gamma))
rm(list = ls())
library(tidyverse)
gmeans <- c(0.2, 0.5, 0.7)
data <- map_dfc(gmeans, ~ rnorm(100, .x, 0.05))
colnames(data) <- c("aa", "Aa", "AA")
data <- data %>% pivot_longer(cols = colnames(data), names_to = "genotype")
data <- data %>% mutate(count = str_count(genotype, "A"))
data <- data %>% mutate(ecotype = rbinom(nrow(data), 1, 0.5))
# Make the three matrices
gcounts <- as.matrix(with(data, table(ecotype, count)))
smr <- data %>%
group_by(ecotype, count) %>%
summarize(
n = n(),
sumgen = sum(value),
ssqgen = sum(value^2)
) %>%
ungroup()
get_matrix <- function(data, variable) {
data %>%
select(ecotype, count, !!!variable) %>%
pivot_wider(names_from = "count", values_from = variable) %>%
select(-ecotype) %>%
as.matrix()
}
marginalize <- function(m) {
m <- cbind(m, apply(m, 1, sum))
rbind(m, apply(m, 2, sum))
}
var_raw <- function(x) mean(x^2) - mean(x)^2
gcounts <- marginalize(get_matrix(smr, "n"))
gsumgen <- marginalize(get_matrix(smr, "sumgen"))
gssqgen <- marginalize(get_matrix(smr, "ssqgen"))
n <- gcounts[3, 4]
meang <- gsumgen[3, 4] / n
meanq <- (gcounts[3, 2] + 2 * gcounts[3, 3]) / n
#meang == mean(data$value)
#meanq == mean(data$count)
covqg <- (2 * gsumgen[3, 3] + gsumgen[3, 2]) / n - meanq * meang
varq <- (4 * gcounts[3, 3] + gcounts[3, 2]) / n - meanq^2
covqg == mean(with(data, count * value)) - meanq * meang
varq == var_raw(data$count)
alpha <- covqg / varq
mod <- lm(value ~ count, data = data)
intercept <- mod$coefficients[1]
slope <- mod$coefficients[2]
#alpha == slope
gexpec <- map_dbl(0:2, ~ meang + alpha * (.x - meanq))
gmeans <- map2_dbl(gsumgen[3, 1:3], gcounts[3, 1:3], ~ .x / .y)
gexpec == map_dbl(0:2, ~ intercept + alpha * .x)
gmeans == tapply(data$value, data$count, mean)
beta <- gexpec - meang
delta <- gmeans - gexpec
varA <- apply(gcounts, 1, function(x) sum(x[1:3] * beta^2) / x[4] - (sum(x[1:3] * beta) / x[4])^2)
varA
apply(gcounts, 1, function(x) var_raw(do.call("c", map2(beta, x[1:3], ~ rep(.x, .y)))))
varD <- apply(gcounts, 1, function(x) sum(x[1:3] * delta^2) / x[4] - (sum(x[1:3] * delta) / x[4])^2)
varD
apply(gcounts, 1, function(x) var_raw(do.call("c", map2(delta, x[1:3], ~ rep(.x, .y)))))
get_resid_var <- function(i, from) {
msq <- gssqgen[i, 4] - 2 * sum(from * gsumgen[i, 1:3]) + sum(gcounts[i, 1:3] * from^2)
msq <- msq / gcounts[i, 4]
sqm <- gsumgen[i, 4] - sum(gcounts[i, 1:3] * from)
sqm <- (sqm / gcounts[i, 4])^2
msq - sqm
}
varI <- map_dbl(1:3, get_resid_var, gmeans)
varN <- map_dbl(1:3, get_resid_var, gexpec)
data <- data %>%
mutate(
epsilon = value - gmeans[count + 1],
gamma = value - gexpec[count + 1]
)
varI
c(tapply(data$epsilon, data$ecotype, var_raw), var_raw(data$epsilon))
varN
c(tapply(data$gamma, data$ecotype, var_raw), var_raw(data$gamma))
rm(list = ls())
library(tidyverse)
gmeans <- c(0.2, 0.5, 0.7)
data <- map_dfc(gmeans, ~ rnorm(100, .x, 0.05))
colnames(data) <- c("aa", "Aa", "AA")
data <- data %>% pivot_longer(cols = colnames(data), names_to = "genotype")
data <- data %>% mutate(count = str_count(genotype, "A"))
data <- data %>% mutate(ecotype = rbinom(nrow(data), 1, 0.5))
# Make the three matrices
gcounts <- as.matrix(with(data, table(ecotype, count)))
smr <- data %>%
group_by(ecotype, count) %>%
summarize(
n = n(),
sumgen = sum(value),
ssqgen = sum(value^2)
) %>%
ungroup()
get_matrix <- function(data, variable) {
data %>%
select(ecotype, count, !!!variable) %>%
pivot_wider(names_from = "count", values_from = variable) %>%
select(-ecotype) %>%
as.matrix()
}
marginalize <- function(m) {
m <- cbind(m, apply(m, 1, sum))
rbind(m, apply(m, 2, sum))
}
var_raw <- function(x) mean(x^2) - mean(x)^2
gcounts <- marginalize(get_matrix(smr, "n"))
gsumgen <- marginalize(get_matrix(smr, "sumgen"))
gssqgen <- marginalize(get_matrix(smr, "ssqgen"))
n <- gcounts[3, 4]
meang <- gsumgen[3, 4] / n
meanq <- (gcounts[3, 2] + 2 * gcounts[3, 3]) / n
#meang == mean(data$value)
#meanq == mean(data$count)
covqg <- (2 * gsumgen[3, 3] + gsumgen[3, 2]) / n - meanq * meang
varq <- (4 * gcounts[3, 3] + gcounts[3, 2]) / n - meanq^2
covqg == mean(with(data, count * value)) - meanq * meang
varq == var_raw(data$count)
alpha <- covqg / varq
mod <- lm(value ~ count, data = data)
intercept <- mod$coefficients[1]
slope <- mod$coefficients[2]
#alpha == slope
gexpec <- map_dbl(0:2, ~ meang + alpha * (.x - meanq))
gmeans <- map2_dbl(gsumgen[3, 1:3], gcounts[3, 1:3], ~ .x / .y)
#gexpec == map_dbl(0:2, ~ intercept + alpha * .x)
#gmeans == tapply(data$value, data$count, mean)
beta <- gexpec - meang
delta <- gmeans - gexpec
varA <- apply(gcounts, 1, function(x) sum(x[1:3] * beta^2) / x[4] - (sum(x[1:3] * beta) / x[4])^2)
rbind(varA, apply(gcounts, 1, function(x) var_raw(do.call("c", map2(beta, x[1:3], ~ rep(.x, .y))))))
varD <- apply(gcounts, 1, function(x) sum(x[1:3] * delta^2) / x[4] - (sum(x[1:3] * delta) / x[4])^2)
rbind(varD, apply(gcounts, 1, function(x) var_raw(do.call("c", map2(delta, x[1:3], ~ rep(.x, .y))))))
get_resid_var <- function(i, from) {
msq <- gssqgen[i, 4] - 2 * sum(from * gsumgen[i, 1:3]) + sum(gcounts[i, 1:3] * from^2)
msq <- msq / gcounts[i, 4]
sqm <- gsumgen[i, 4] - sum(gcounts[i, 1:3] * from)
sqm <- (sqm / gcounts[i, 4])^2
msq - sqm
}
varI <- map_dbl(1:3, get_resid_var, gmeans)
varN <- map_dbl(1:3, get_resid_var, gexpec)
data <- data %>%
mutate(
epsilon = value - gmeans[count + 1],
gamma = value - gexpec[count + 1]
)
rbind(varI, c(tapply(data$epsilon, data$ecotype, var_raw), var_raw(data$epsilon)))
rbind(varN, c(tapply(data$gamma, data$ecotype, var_raw), var_raw(data$gamma)))
rm(list = ls())
library(tidyverse)
gmeans <- c(0.2, 0.5, 0.7)
data <- map_dfc(gmeans, ~ rnorm(100, .x, 0.0001))
colnames(data) <- c("aa", "Aa", "AA")
data <- data %>% pivot_longer(cols = colnames(data), names_to = "genotype")
data <- data %>% mutate(count = str_count(genotype, "A"))
data <- data %>% mutate(ecotype = rbinom(nrow(data), 1, 0.5))
# Make the three matrices
gcounts <- as.matrix(with(data, table(ecotype, count)))
smr <- data %>%
group_by(ecotype, count) %>%
summarize(
n = n(),
sumgen = sum(value),
ssqgen = sum(value^2)
) %>%
ungroup()
get_matrix <- function(data, variable) {
data %>%
select(ecotype, count, !!!variable) %>%
pivot_wider(names_from = "count", values_from = variable) %>%
select(-ecotype) %>%
as.matrix()
}
marginalize <- function(m) {
m <- cbind(m, apply(m, 1, sum))
rbind(m, apply(m, 2, sum))
}
var_raw <- function(x) mean(x^2) - mean(x)^2
gcounts <- marginalize(get_matrix(smr, "n"))
gsumgen <- marginalize(get_matrix(smr, "sumgen"))
gssqgen <- marginalize(get_matrix(smr, "ssqgen"))
n <- gcounts[3, 4]
meang <- gsumgen[3, 4] / n
meanq <- (gcounts[3, 2] + 2 * gcounts[3, 3]) / n
#meang == mean(data$value)
#meanq == mean(data$count)
covqg <- (2 * gsumgen[3, 3] + gsumgen[3, 2]) / n - meanq * meang
varq <- (4 * gcounts[3, 3] + gcounts[3, 2]) / n - meanq^2
covqg == mean(with(data, count * value)) - meanq * meang
varq == var_raw(data$count)
alpha <- covqg / varq
mod <- lm(value ~ count, data = data)
intercept <- mod$coefficients[1]
slope <- mod$coefficients[2]
#alpha == slope
gexpec <- map_dbl(0:2, ~ meang + alpha * (.x - meanq))
gmeans <- map2_dbl(gsumgen[3, 1:3], gcounts[3, 1:3], ~ .x / .y)
#gexpec == map_dbl(0:2, ~ intercept + alpha * .x)
#gmeans == tapply(data$value, data$count, mean)
beta <- gexpec - meang
delta <- gmeans - gexpec
varA <- apply(gcounts, 1, function(x) sum(x[1:3] * beta^2) / x[4] - (sum(x[1:3] * beta) / x[4])^2)
rbind(varA, apply(gcounts, 1, function(x) var_raw(do.call("c", map2(beta, x[1:3], ~ rep(.x, .y))))))
varD <- apply(gcounts, 1, function(x) sum(x[1:3] * delta^2) / x[4] - (sum(x[1:3] * delta) / x[4])^2)
rbind(varD, apply(gcounts, 1, function(x) var_raw(do.call("c", map2(delta, x[1:3], ~ rep(.x, .y))))))
get_resid_var <- function(i, from) {
msq <- gssqgen[i, 4] - 2 * sum(from * gsumgen[i, 1:3]) + sum(gcounts[i, 1:3] * from^2)
msq <- msq / gcounts[i, 4]
sqm <- gsumgen[i, 4] - sum(gcounts[i, 1:3] * from)
sqm <- (sqm / gcounts[i, 4])^2
msq - sqm
}
varI <- map_dbl(1:3, get_resid_var, gmeans)
varN <- map_dbl(1:3, get_resid_var, gexpec)
data <- data %>%
mutate(
epsilon = value - gmeans[count + 1],
gamma = value - gexpec[count + 1]
)
rbind(varI, c(tapply(data$epsilon, data$ecotype, var_raw), var_raw(data$epsilon)))
rbind(varN, c(tapply(data$gamma, data$ecotype, var_raw), var_raw(data$gamma)))
rm(list = ls())
library(tidyverse)
gmeans <- c(0.2, 0.5, 0.7)
data <- map_dfc(gmeans, ~ rnorm(100, .x, 0.00000001))
colnames(data) <- c("aa", "Aa", "AA")
data <- data %>% pivot_longer(cols = colnames(data), names_to = "genotype")
data <- data %>% mutate(count = str_count(genotype, "A"))
data <- data %>% mutate(ecotype = rbinom(nrow(data), 1, 0.5))
# Make the three matrices
gcounts <- as.matrix(with(data, table(ecotype, count)))
smr <- data %>%
group_by(ecotype, count) %>%
summarize(
n = n(),
sumgen = sum(value),
ssqgen = sum(value^2)
) %>%
ungroup()
get_matrix <- function(data, variable) {
data %>%
select(ecotype, count, !!!variable) %>%
pivot_wider(names_from = "count", values_from = variable) %>%
select(-ecotype) %>%
as.matrix()
}
marginalize <- function(m) {
m <- cbind(m, apply(m, 1, sum))
rbind(m, apply(m, 2, sum))
}
var_raw <- function(x) mean(x^2) - mean(x)^2
gcounts <- marginalize(get_matrix(smr, "n"))
gsumgen <- marginalize(get_matrix(smr, "sumgen"))
gssqgen <- marginalize(get_matrix(smr, "ssqgen"))
n <- gcounts[3, 4]
meang <- gsumgen[3, 4] / n
meanq <- (gcounts[3, 2] + 2 * gcounts[3, 3]) / n
#meang == mean(data$value)
#meanq == mean(data$count)
covqg <- (2 * gsumgen[3, 3] + gsumgen[3, 2]) / n - meanq * meang
varq <- (4 * gcounts[3, 3] + gcounts[3, 2]) / n - meanq^2
covqg == mean(with(data, count * value)) - meanq * meang
varq == var_raw(data$count)
alpha <- covqg / varq
mod <- lm(value ~ count, data = data)
intercept <- mod$coefficients[1]
slope <- mod$coefficients[2]
#alpha == slope
gexpec <- map_dbl(0:2, ~ meang + alpha * (.x - meanq))
gmeans <- map2_dbl(gsumgen[3, 1:3], gcounts[3, 1:3], ~ .x / .y)
#gexpec == map_dbl(0:2, ~ intercept + alpha * .x)
#gmeans == tapply(data$value, data$count, mean)
beta <- gexpec - meang
delta <- gmeans - gexpec
varA <- apply(gcounts, 1, function(x) sum(x[1:3] * beta^2) / x[4] - (sum(x[1:3] * beta) / x[4])^2)
rbind(varA, apply(gcounts, 1, function(x) var_raw(do.call("c", map2(beta, x[1:3], ~ rep(.x, .y))))))
varD <- apply(gcounts, 1, function(x) sum(x[1:3] * delta^2) / x[4] - (sum(x[1:3] * delta) / x[4])^2)
rbind(varD, apply(gcounts, 1, function(x) var_raw(do.call("c", map2(delta, x[1:3], ~ rep(.x, .y))))))
get_resid_var <- function(i, from) {
msq <- gssqgen[i, 4] - 2 * sum(from * gsumgen[i, 1:3]) + sum(gcounts[i, 1:3] * from^2)
msq <- msq / gcounts[i, 4]
sqm <- gsumgen[i, 4] - sum(gcounts[i, 1:3] * from)
sqm <- (sqm / gcounts[i, 4])^2
msq - sqm
}
varI <- map_dbl(1:3, get_resid_var, gmeans)
varN <- map_dbl(1:3, get_resid_var, gexpec)
data <- data %>%
mutate(
epsilon = value - gmeans[count + 1],
gamma = value - gexpec[count + 1]
)
rbind(varI, c(tapply(data$epsilon, data$ecotype, var_raw), var_raw(data$epsilon)))
rbind(varN, c(tapply(data$gamma, data$ecotype, var_raw), var_raw(data$gamma)))
rm(list = ls())
library(tidyverse)
gmeans <- c(0.2, 0.5, 0.7)
data <- map_dfc(gmeans, ~ rnorm(100, .x, 0))
colnames(data) <- c("aa", "Aa", "AA")
data <- data %>% pivot_longer(cols = colnames(data), names_to = "genotype")
data <- data %>% mutate(count = str_count(genotype, "A"))
data <- data %>% mutate(ecotype = rbinom(nrow(data), 1, 0.5))
# Make the three matrices
gcounts <- as.matrix(with(data, table(ecotype, count)))
smr <- data %>%
group_by(ecotype, count) %>%
summarize(
n = n(),
sumgen = sum(value),
ssqgen = sum(value^2)
) %>%
ungroup()
get_matrix <- function(data, variable) {
data %>%
select(ecotype, count, !!!variable) %>%
pivot_wider(names_from = "count", values_from = variable) %>%
select(-ecotype) %>%
as.matrix()
}
marginalize <- function(m) {
m <- cbind(m, apply(m, 1, sum))
rbind(m, apply(m, 2, sum))
}
var_raw <- function(x) mean(x^2) - mean(x)^2
gcounts <- marginalize(get_matrix(smr, "n"))
gsumgen <- marginalize(get_matrix(smr, "sumgen"))
gssqgen <- marginalize(get_matrix(smr, "ssqgen"))
n <- gcounts[3, 4]
meang <- gsumgen[3, 4] / n
meanq <- (gcounts[3, 2] + 2 * gcounts[3, 3]) / n
#meang == mean(data$value)
#meanq == mean(data$count)
covqg <- (2 * gsumgen[3, 3] + gsumgen[3, 2]) / n - meanq * meang
varq <- (4 * gcounts[3, 3] + gcounts[3, 2]) / n - meanq^2
covqg == mean(with(data, count * value)) - meanq * meang
varq == var_raw(data$count)
alpha <- covqg / varq
mod <- lm(value ~ count, data = data)
intercept <- mod$coefficients[1]
slope <- mod$coefficients[2]
#alpha == slope
gexpec <- map_dbl(0:2, ~ meang + alpha * (.x - meanq))
gmeans <- map2_dbl(gsumgen[3, 1:3], gcounts[3, 1:3], ~ .x / .y)
#gexpec == map_dbl(0:2, ~ intercept + alpha * .x)
#gmeans == tapply(data$value, data$count, mean)
beta <- gexpec - meang
delta <- gmeans - gexpec
varA <- apply(gcounts, 1, function(x) sum(x[1:3] * beta^2) / x[4] - (sum(x[1:3] * beta) / x[4])^2)
rbind(varA, apply(gcounts, 1, function(x) var_raw(do.call("c", map2(beta, x[1:3], ~ rep(.x, .y))))))
varD <- apply(gcounts, 1, function(x) sum(x[1:3] * delta^2) / x[4] - (sum(x[1:3] * delta) / x[4])^2)
rbind(varD, apply(gcounts, 1, function(x) var_raw(do.call("c", map2(delta, x[1:3], ~ rep(.x, .y))))))
get_resid_var <- function(i, from) {
msq <- gssqgen[i, 4] - 2 * sum(from * gsumgen[i, 1:3]) + sum(gcounts[i, 1:3] * from^2)
msq <- msq / gcounts[i, 4]
sqm <- gsumgen[i, 4] - sum(gcounts[i, 1:3] * from)
sqm <- (sqm / gcounts[i, 4])^2
msq - sqm
}
varI <- map_dbl(1:3, get_resid_var, gmeans)
varN <- map_dbl(1:3, get_resid_var, gexpec)
data <- data %>%
mutate(
epsilon = value - gmeans[count + 1],
gamma = value - gexpec[count + 1]
)
rbind(varI, c(tapply(data$epsilon, data$ecotype, var_raw), var_raw(data$epsilon)))
rbind(varN, c(tapply(data$gamma, data$ecotype, var_raw), var_raw(data$gamma)))
delta
gexpec
gmeans
ggplot(data, aes(x = count, y = value, color = ecotype)) +
geom_point() +
geom_abline(intercept = intercept, slope = alpha)
rm(list = ls())
library(tidyverse)
gmeans <- c(0.3, 0.5, 0.7)
data <- map_dfc(gmeans, ~ rnorm(100, .x, 0))
colnames(data) <- c("aa", "Aa", "AA")
data <- data %>% pivot_longer(cols = colnames(data), names_to = "genotype")
data <- data %>% mutate(count = str_count(genotype, "A"))
data <- data %>% mutate(ecotype = rbinom(nrow(data), 1, 0.5))
# Make the three matrices
gcounts <- as.matrix(with(data, table(ecotype, count)))
smr <- data %>%
group_by(ecotype, count) %>%
summarize(
n = n(),
sumgen = sum(value),
ssqgen = sum(value^2)
) %>%
ungroup()
get_matrix <- function(data, variable) {
data %>%
select(ecotype, count, !!!variable) %>%
pivot_wider(names_from = "count", values_from = variable) %>%
select(-ecotype) %>%
as.matrix()
}
marginalize <- function(m) {
m <- cbind(m, apply(m, 1, sum))
rbind(m, apply(m, 2, sum))
}
var_raw <- function(x) mean(x^2) - mean(x)^2
gcounts <- marginalize(get_matrix(smr, "n"))
gsumgen <- marginalize(get_matrix(smr, "sumgen"))
gssqgen <- marginalize(get_matrix(smr, "ssqgen"))
n <- gcounts[3, 4]
meang <- gsumgen[3, 4] / n
meanq <- (gcounts[3, 2] + 2 * gcounts[3, 3]) / n
#meang == mean(data$value)
#meanq == mean(data$count)
covqg <- (2 * gsumgen[3, 3] + gsumgen[3, 2]) / n - meanq * meang
varq <- (4 * gcounts[3, 3] + gcounts[3, 2]) / n - meanq^2
covqg == mean(with(data, count * value)) - meanq * meang
varq == var_raw(data$count)
alpha <- covqg / varq
mod <- lm(value ~ count, data = data)
intercept <- mod$coefficients[1]
slope <- mod$coefficients[2]
#alpha == slope
gexpec <- map_dbl(0:2, ~ meang + alpha * (.x - meanq))
gmeans <- map2_dbl(gsumgen[3, 1:3], gcounts[3, 1:3], ~ .x / .y)
#gexpec == map_dbl(0:2, ~ intercept + alpha * .x)
#gmeans == tapply(data$value, data$count, mean)
beta <- gexpec - meang
delta <- gmeans - gexpec
varA <- apply(gcounts, 1, function(x) sum(x[1:3] * beta^2) / x[4] - (sum(x[1:3] * beta) / x[4])^2)
rbind(varA, apply(gcounts, 1, function(x) var_raw(do.call("c", map2(beta, x[1:3], ~ rep(.x, .y))))))
varD <- apply(gcounts, 1, function(x) sum(x[1:3] * delta^2) / x[4] - (sum(x[1:3] * delta) / x[4])^2)
rbind(varD, apply(gcounts, 1, function(x) var_raw(do.call("c", map2(delta, x[1:3], ~ rep(.x, .y))))))
get_resid_var <- function(i, from) {
msq <- gssqgen[i, 4] - 2 * sum(from * gsumgen[i, 1:3]) + sum(gcounts[i, 1:3] * from^2)
msq <- msq / gcounts[i, 4]
sqm <- gsumgen[i, 4] - sum(gcounts[i, 1:3] * from)
sqm <- (sqm / gcounts[i, 4])^2
msq - sqm
}
varI <- map_dbl(1:3, get_resid_var, gmeans)
varN <- map_dbl(1:3, get_resid_var, gexpec)
data <- data %>%
mutate(
epsilon = value - gmeans[count + 1],
gamma = value - gexpec[count + 1]
)
rbind(varI, c(tapply(data$epsilon, data$ecotype, var_raw), var_raw(data$epsilon)))
rbind(varN, c(tapply(data$gamma, data$ecotype, var_raw), var_raw(data$gamma)))
ggplot(data, aes(x = count, y = value, color = ecotype)) +
geom_point() +
geom_abline(intercept = intercept, slope = alpha)
